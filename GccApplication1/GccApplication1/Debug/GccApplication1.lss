
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000092a  0000099e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000092a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000009ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000982  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f9  00000000  00000000  000013e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059b  00000000  00000000  00001adb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00002078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006dc2  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015b  00000000  00000000  00008ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00009051  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000028a0  00000000  00000000  00009099  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 b5 02 	call	0x56a	; 0x56a <main>
  8e:	0c 94 93 04 	jmp	0x926	; 0x926 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setupSevenSegmentDisplay>:
/**
* @brief Configura os pinos necessários para o display de 7 segmentos.
*
* PD0–PD7 será usado para os segmentos (a–g), e PB0–PB3 para selecionar os dígitos.
*/
void setupSevenSegmentDisplay(void) {
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	DDRD |= 0x7F; // PORTD como saída (segmentos)
  9e:	8a e2       	ldi	r24, 0x2A	; 42
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	2a e2       	ldi	r18, 0x2A	; 42
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	f9 01       	movw	r30, r18
  a8:	20 81       	ld	r18, Z
  aa:	2f 67       	ori	r18, 0x7F	; 127
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
	DDRB |= 0x0F; // PB0–PB3 como saída (seleção dos dígitos)
  b0:	84 e2       	ldi	r24, 0x24	; 36
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	24 e2       	ldi	r18, 0x24	; 36
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	f9 01       	movw	r30, r18
  ba:	20 81       	ld	r18, Z
  bc:	2f 60       	ori	r18, 0x0F	; 15
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
}
  c2:	00 00       	nop
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <showSevenSegmentDisplayValue>:
* @brief Mostra um valor (0–F) em um display específico.
*
* @param value Valor hexadecimal a ser exibido (0x0 a 0xF).
* @param displayAddress Endereço do display (0 a 3) correspondente a PB0–PB3.
*/
void showSevenSegmentDisplayValue(uint8_t value, uint8_t displayAddress) {
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	00 d0       	rcall	.+0      	; 0xd0 <showSevenSegmentDisplayValue+0x6>
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	89 83       	std	Y+1, r24	; 0x01
  d6:	6a 83       	std	Y+2, r22	; 0x02
	if (value < 16) {
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	80 31       	cpi	r24, 0x10	; 16
  dc:	c8 f4       	brcc	.+50     	; 0x110 <showSevenSegmentDisplayValue+0x46>
		PORTD &= 0x80; // Limpa os 7 últimos bits da porta D
  de:	8b e2       	ldi	r24, 0x2B	; 43
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	2b e2       	ldi	r18, 0x2B	; 43
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	f9 01       	movw	r30, r18
  e8:	20 81       	ld	r18, Z
  ea:	20 78       	andi	r18, 0x80	; 128
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18
		PORTD |= sevenSegmentCode[value]; // Define o valor a ser mostrado
  f0:	8b e2       	ldi	r24, 0x2B	; 43
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	2b e2       	ldi	r18, 0x2B	; 43
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	f9 01       	movw	r30, r18
  fa:	40 81       	ld	r20, Z
  fc:	29 81       	ldd	r18, Y+1	; 0x01
  fe:	22 2f       	mov	r18, r18
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	20 50       	subi	r18, 0x00	; 0
 104:	3f 4f       	sbci	r19, 0xFF	; 255
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	24 2b       	or	r18, r20
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
	}
	PORTB &= 0xF0; // Limpa PB0–PB3
 110:	85 e2       	ldi	r24, 0x25	; 37
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	25 e2       	ldi	r18, 0x25	; 37
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	20 81       	ld	r18, Z
 11c:	20 7f       	andi	r18, 0xF0	; 240
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
	PORTB |= ((1 << displayAddress) & 0x0F); // Ativa o display desejado
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	25 e2       	ldi	r18, 0x25	; 37
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	20 81       	ld	r18, Z
 12e:	62 2f       	mov	r22, r18
 130:	2a 81       	ldd	r18, Y+2	; 0x02
 132:	42 2f       	mov	r20, r18
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <showSevenSegmentDisplayValue+0x76>
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	4a 95       	dec	r20
 142:	e2 f7       	brpl	.-8      	; 0x13c <showSevenSegmentDisplayValue+0x72>
 144:	2f 70       	andi	r18, 0x0F	; 15
 146:	26 2b       	or	r18, r22
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
}
 14c:	00 00       	nop
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <cleanSevenSegmentDisplay>:

/**
* @brief Limpa a seleção de displays, desligando todos.
*/
void cleanSevenSegmentDisplay(void) {
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
	PORTB &= 0xF0; // Limpa PB0–PB3
 160:	85 e2       	ldi	r24, 0x25	; 37
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	25 e2       	ldi	r18, 0x25	; 37
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	f9 01       	movw	r30, r18
 16a:	20 81       	ld	r18, Z
 16c:	20 7f       	andi	r18, 0xF0	; 240
 16e:	fc 01       	movw	r30, r24
 170:	20 83       	st	Z, r18
}
 172:	00 00       	nop
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <showAllSevenSegmentDisplay>:

/**
* @brief Mostra valores individuais em cada um dos 4 displays.
*/
void showAllSevenSegmentDisplay(uint8_t valueDisp_0, uint8_t valueDisp_1, uint8_t valueDisp_2, uint8_t valueDisp_3) {
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	ec 97       	sbiw	r28, 0x3c	; 60
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	89 af       	std	Y+57, r24	; 0x39
 190:	6a af       	std	Y+58, r22	; 0x3a
 192:	4b af       	std	Y+59, r20	; 0x3b
 194:	2c af       	std	Y+60, r18	; 0x3c
	cleanSevenSegmentDisplay();
 196:	0e 94 ac 00 	call	0x158	; 0x158 <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_0, 0);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	89 ad       	ldd	r24, Y+57	; 0x39
 19e:	0e 94 65 00 	call	0xca	; 0xca <showSevenSegmentDisplayValue>
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	a0 e0       	ldi	r26, 0x00	; 0
 1a8:	b0 e4       	ldi	r27, 0x40	; 64
 1aa:	89 83       	std	Y+1, r24	; 0x01
 1ac:	9a 83       	std	Y+2, r25	; 0x02
 1ae:	ab 83       	std	Y+3, r26	; 0x03
 1b0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	4a e7       	ldi	r20, 0x7A	; 122
 1b8:	55 e4       	ldi	r21, 0x45	; 69
 1ba:	69 81       	ldd	r22, Y+1	; 0x01
 1bc:	7a 81       	ldd	r23, Y+2	; 0x02
 1be:	8b 81       	ldd	r24, Y+3	; 0x03
 1c0:	9c 81       	ldd	r25, Y+4	; 0x04
 1c2:	0e 94 ef 03 	call	0x7de	; 0x7de <__mulsf3>
 1c6:	dc 01       	movw	r26, r24
 1c8:	cb 01       	movw	r24, r22
 1ca:	8f a7       	std	Y+47, r24	; 0x2f
 1cc:	98 ab       	std	Y+48, r25	; 0x30
 1ce:	a9 ab       	std	Y+49, r26	; 0x31
 1d0:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	40 e8       	ldi	r20, 0x80	; 128
 1d8:	5f e3       	ldi	r21, 0x3F	; 63
 1da:	6f a5       	ldd	r22, Y+47	; 0x2f
 1dc:	78 a9       	ldd	r23, Y+48	; 0x30
 1de:	89 a9       	ldd	r24, Y+49	; 0x31
 1e0:	9a a9       	ldd	r25, Y+50	; 0x32
 1e2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__cmpsf2>
 1e6:	88 23       	and	r24, r24
 1e8:	2c f4       	brge	.+10     	; 0x1f4 <showAllSevenSegmentDisplay+0x7a>
		__ticks = 1;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	9c ab       	std	Y+52, r25	; 0x34
 1f0:	8b ab       	std	Y+51, r24	; 0x33
 1f2:	3f c0       	rjmp	.+126    	; 0x272 <showAllSevenSegmentDisplay+0xf8>
	else if (__tmp > 65535)
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	3f ef       	ldi	r19, 0xFF	; 255
 1f8:	4f e7       	ldi	r20, 0x7F	; 127
 1fa:	57 e4       	ldi	r21, 0x47	; 71
 1fc:	6f a5       	ldd	r22, Y+47	; 0x2f
 1fe:	78 a9       	ldd	r23, Y+48	; 0x30
 200:	89 a9       	ldd	r24, Y+49	; 0x31
 202:	9a a9       	ldd	r25, Y+50	; 0x32
 204:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__gesf2>
 208:	18 16       	cp	r1, r24
 20a:	4c f5       	brge	.+82     	; 0x25e <showAllSevenSegmentDisplay+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	40 e2       	ldi	r20, 0x20	; 32
 212:	51 e4       	ldi	r21, 0x41	; 65
 214:	69 81       	ldd	r22, Y+1	; 0x01
 216:	7a 81       	ldd	r23, Y+2	; 0x02
 218:	8b 81       	ldd	r24, Y+3	; 0x03
 21a:	9c 81       	ldd	r25, Y+4	; 0x04
 21c:	0e 94 ef 03 	call	0x7de	; 0x7de <__mulsf3>
 220:	dc 01       	movw	r26, r24
 222:	cb 01       	movw	r24, r22
 224:	bc 01       	movw	r22, r24
 226:	cd 01       	movw	r24, r26
 228:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fixunssfsi>
 22c:	dc 01       	movw	r26, r24
 22e:	cb 01       	movw	r24, r22
 230:	9c ab       	std	Y+52, r25	; 0x34
 232:	8b ab       	std	Y+51, r24	; 0x33
 234:	0f c0       	rjmp	.+30     	; 0x254 <showAllSevenSegmentDisplay+0xda>
 236:	80 e9       	ldi	r24, 0x90	; 144
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	9e ab       	std	Y+54, r25	; 0x36
 23c:	8d ab       	std	Y+53, r24	; 0x35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 23e:	8d a9       	ldd	r24, Y+53	; 0x35
 240:	9e a9       	ldd	r25, Y+54	; 0x36
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <showAllSevenSegmentDisplay+0xc8>
 246:	9e ab       	std	Y+54, r25	; 0x36
 248:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24a:	8b a9       	ldd	r24, Y+51	; 0x33
 24c:	9c a9       	ldd	r25, Y+52	; 0x34
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	9c ab       	std	Y+52, r25	; 0x34
 252:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 254:	8b a9       	ldd	r24, Y+51	; 0x33
 256:	9c a9       	ldd	r25, Y+52	; 0x34
 258:	89 2b       	or	r24, r25
 25a:	69 f7       	brne	.-38     	; 0x236 <showAllSevenSegmentDisplay+0xbc>
 25c:	14 c0       	rjmp	.+40     	; 0x286 <showAllSevenSegmentDisplay+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 25e:	6f a5       	ldd	r22, Y+47	; 0x2f
 260:	78 a9       	ldd	r23, Y+48	; 0x30
 262:	89 a9       	ldd	r24, Y+49	; 0x31
 264:	9a a9       	ldd	r25, Y+50	; 0x32
 266:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fixunssfsi>
 26a:	dc 01       	movw	r26, r24
 26c:	cb 01       	movw	r24, r22
 26e:	9c ab       	std	Y+52, r25	; 0x34
 270:	8b ab       	std	Y+51, r24	; 0x33
 272:	8b a9       	ldd	r24, Y+51	; 0x33
 274:	9c a9       	ldd	r25, Y+52	; 0x34
 276:	98 af       	std	Y+56, r25	; 0x38
 278:	8f ab       	std	Y+55, r24	; 0x37
 27a:	8f a9       	ldd	r24, Y+55	; 0x37
 27c:	98 ad       	ldd	r25, Y+56	; 0x38
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <showAllSevenSegmentDisplay+0x104>
 282:	98 af       	std	Y+56, r25	; 0x38
 284:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(2);

	cleanSevenSegmentDisplay();
 286:	0e 94 ac 00 	call	0x158	; 0x158 <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_1, 1);
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	8a ad       	ldd	r24, Y+58	; 0x3a
 28e:	0e 94 65 00 	call	0xca	; 0xca <showSevenSegmentDisplayValue>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	a0 e0       	ldi	r26, 0x00	; 0
 298:	b0 e4       	ldi	r27, 0x40	; 64
 29a:	8d 83       	std	Y+5, r24	; 0x05
 29c:	9e 83       	std	Y+6, r25	; 0x06
 29e:	af 83       	std	Y+7, r26	; 0x07
 2a0:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	4a e7       	ldi	r20, 0x7A	; 122
 2a8:	55 e4       	ldi	r21, 0x45	; 69
 2aa:	6d 81       	ldd	r22, Y+5	; 0x05
 2ac:	7e 81       	ldd	r23, Y+6	; 0x06
 2ae:	8f 81       	ldd	r24, Y+7	; 0x07
 2b0:	98 85       	ldd	r25, Y+8	; 0x08
 2b2:	0e 94 ef 03 	call	0x7de	; 0x7de <__mulsf3>
 2b6:	dc 01       	movw	r26, r24
 2b8:	cb 01       	movw	r24, r22
 2ba:	8d a3       	std	Y+37, r24	; 0x25
 2bc:	9e a3       	std	Y+38, r25	; 0x26
 2be:	af a3       	std	Y+39, r26	; 0x27
 2c0:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	40 e8       	ldi	r20, 0x80	; 128
 2c8:	5f e3       	ldi	r21, 0x3F	; 63
 2ca:	6d a1       	ldd	r22, Y+37	; 0x25
 2cc:	7e a1       	ldd	r23, Y+38	; 0x26
 2ce:	8f a1       	ldd	r24, Y+39	; 0x27
 2d0:	98 a5       	ldd	r25, Y+40	; 0x28
 2d2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__cmpsf2>
 2d6:	88 23       	and	r24, r24
 2d8:	2c f4       	brge	.+10     	; 0x2e4 <showAllSevenSegmentDisplay+0x16a>
		__ticks = 1;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	9a a7       	std	Y+42, r25	; 0x2a
 2e0:	89 a7       	std	Y+41, r24	; 0x29
 2e2:	3f c0       	rjmp	.+126    	; 0x362 <showAllSevenSegmentDisplay+0x1e8>
	else if (__tmp > 65535)
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	3f ef       	ldi	r19, 0xFF	; 255
 2e8:	4f e7       	ldi	r20, 0x7F	; 127
 2ea:	57 e4       	ldi	r21, 0x47	; 71
 2ec:	6d a1       	ldd	r22, Y+37	; 0x25
 2ee:	7e a1       	ldd	r23, Y+38	; 0x26
 2f0:	8f a1       	ldd	r24, Y+39	; 0x27
 2f2:	98 a5       	ldd	r25, Y+40	; 0x28
 2f4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__gesf2>
 2f8:	18 16       	cp	r1, r24
 2fa:	4c f5       	brge	.+82     	; 0x34e <showAllSevenSegmentDisplay+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 e2       	ldi	r20, 0x20	; 32
 302:	51 e4       	ldi	r21, 0x41	; 65
 304:	6d 81       	ldd	r22, Y+5	; 0x05
 306:	7e 81       	ldd	r23, Y+6	; 0x06
 308:	8f 81       	ldd	r24, Y+7	; 0x07
 30a:	98 85       	ldd	r25, Y+8	; 0x08
 30c:	0e 94 ef 03 	call	0x7de	; 0x7de <__mulsf3>
 310:	dc 01       	movw	r26, r24
 312:	cb 01       	movw	r24, r22
 314:	bc 01       	movw	r22, r24
 316:	cd 01       	movw	r24, r26
 318:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fixunssfsi>
 31c:	dc 01       	movw	r26, r24
 31e:	cb 01       	movw	r24, r22
 320:	9a a7       	std	Y+42, r25	; 0x2a
 322:	89 a7       	std	Y+41, r24	; 0x29
 324:	0f c0       	rjmp	.+30     	; 0x344 <showAllSevenSegmentDisplay+0x1ca>
 326:	80 e9       	ldi	r24, 0x90	; 144
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	9c a7       	std	Y+44, r25	; 0x2c
 32c:	8b a7       	std	Y+43, r24	; 0x2b
 32e:	8b a5       	ldd	r24, Y+43	; 0x2b
 330:	9c a5       	ldd	r25, Y+44	; 0x2c
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <showAllSevenSegmentDisplay+0x1b8>
 336:	9c a7       	std	Y+44, r25	; 0x2c
 338:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 33a:	89 a5       	ldd	r24, Y+41	; 0x29
 33c:	9a a5       	ldd	r25, Y+42	; 0x2a
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	9a a7       	std	Y+42, r25	; 0x2a
 342:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 344:	89 a5       	ldd	r24, Y+41	; 0x29
 346:	9a a5       	ldd	r25, Y+42	; 0x2a
 348:	89 2b       	or	r24, r25
 34a:	69 f7       	brne	.-38     	; 0x326 <showAllSevenSegmentDisplay+0x1ac>
 34c:	14 c0       	rjmp	.+40     	; 0x376 <showAllSevenSegmentDisplay+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 34e:	6d a1       	ldd	r22, Y+37	; 0x25
 350:	7e a1       	ldd	r23, Y+38	; 0x26
 352:	8f a1       	ldd	r24, Y+39	; 0x27
 354:	98 a5       	ldd	r25, Y+40	; 0x28
 356:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fixunssfsi>
 35a:	dc 01       	movw	r26, r24
 35c:	cb 01       	movw	r24, r22
 35e:	9a a7       	std	Y+42, r25	; 0x2a
 360:	89 a7       	std	Y+41, r24	; 0x29
 362:	89 a5       	ldd	r24, Y+41	; 0x29
 364:	9a a5       	ldd	r25, Y+42	; 0x2a
 366:	9e a7       	std	Y+46, r25	; 0x2e
 368:	8d a7       	std	Y+45, r24	; 0x2d
 36a:	8d a5       	ldd	r24, Y+45	; 0x2d
 36c:	9e a5       	ldd	r25, Y+46	; 0x2e
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <showAllSevenSegmentDisplay+0x1f4>
 372:	9e a7       	std	Y+46, r25	; 0x2e
 374:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(2);

	cleanSevenSegmentDisplay();
 376:	0e 94 ac 00 	call	0x158	; 0x158 <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_2, 2);
 37a:	62 e0       	ldi	r22, 0x02	; 2
 37c:	8b ad       	ldd	r24, Y+59	; 0x3b
 37e:	0e 94 65 00 	call	0xca	; 0xca <showSevenSegmentDisplayValue>
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	a0 e0       	ldi	r26, 0x00	; 0
 388:	b0 e4       	ldi	r27, 0x40	; 64
 38a:	89 87       	std	Y+9, r24	; 0x09
 38c:	9a 87       	std	Y+10, r25	; 0x0a
 38e:	ab 87       	std	Y+11, r26	; 0x0b
 390:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	4a e7       	ldi	r20, 0x7A	; 122
 398:	55 e4       	ldi	r21, 0x45	; 69
 39a:	69 85       	ldd	r22, Y+9	; 0x09
 39c:	7a 85       	ldd	r23, Y+10	; 0x0a
 39e:	8b 85       	ldd	r24, Y+11	; 0x0b
 3a0:	9c 85       	ldd	r25, Y+12	; 0x0c
 3a2:	0e 94 ef 03 	call	0x7de	; 0x7de <__mulsf3>
 3a6:	dc 01       	movw	r26, r24
 3a8:	cb 01       	movw	r24, r22
 3aa:	8b 8f       	std	Y+27, r24	; 0x1b
 3ac:	9c 8f       	std	Y+28, r25	; 0x1c
 3ae:	ad 8f       	std	Y+29, r26	; 0x1d
 3b0:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
 3b2:	20 e0       	ldi	r18, 0x00	; 0
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	40 e8       	ldi	r20, 0x80	; 128
 3b8:	5f e3       	ldi	r21, 0x3F	; 63
 3ba:	6b 8d       	ldd	r22, Y+27	; 0x1b
 3bc:	7c 8d       	ldd	r23, Y+28	; 0x1c
 3be:	8d 8d       	ldd	r24, Y+29	; 0x1d
 3c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
 3c2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__cmpsf2>
 3c6:	88 23       	and	r24, r24
 3c8:	2c f4       	brge	.+10     	; 0x3d4 <showAllSevenSegmentDisplay+0x25a>
		__ticks = 1;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	98 a3       	std	Y+32, r25	; 0x20
 3d0:	8f 8f       	std	Y+31, r24	; 0x1f
 3d2:	3f c0       	rjmp	.+126    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
	else if (__tmp > 65535)
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	3f ef       	ldi	r19, 0xFF	; 255
 3d8:	4f e7       	ldi	r20, 0x7F	; 127
 3da:	57 e4       	ldi	r21, 0x47	; 71
 3dc:	6b 8d       	ldd	r22, Y+27	; 0x1b
 3de:	7c 8d       	ldd	r23, Y+28	; 0x1c
 3e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
 3e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
 3e4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__gesf2>
 3e8:	18 16       	cp	r1, r24
 3ea:	4c f5       	brge	.+82     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	40 e2       	ldi	r20, 0x20	; 32
 3f2:	51 e4       	ldi	r21, 0x41	; 65
 3f4:	69 85       	ldd	r22, Y+9	; 0x09
 3f6:	7a 85       	ldd	r23, Y+10	; 0x0a
 3f8:	8b 85       	ldd	r24, Y+11	; 0x0b
 3fa:	9c 85       	ldd	r25, Y+12	; 0x0c
 3fc:	0e 94 ef 03 	call	0x7de	; 0x7de <__mulsf3>
 400:	dc 01       	movw	r26, r24
 402:	cb 01       	movw	r24, r22
 404:	bc 01       	movw	r22, r24
 406:	cd 01       	movw	r24, r26
 408:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fixunssfsi>
 40c:	dc 01       	movw	r26, r24
 40e:	cb 01       	movw	r24, r22
 410:	98 a3       	std	Y+32, r25	; 0x20
 412:	8f 8f       	std	Y+31, r24	; 0x1f
 414:	0f c0       	rjmp	.+30     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 416:	80 e9       	ldi	r24, 0x90	; 144
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	9a a3       	std	Y+34, r25	; 0x22
 41c:	89 a3       	std	Y+33, r24	; 0x21
 41e:	89 a1       	ldd	r24, Y+33	; 0x21
 420:	9a a1       	ldd	r25, Y+34	; 0x22
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 426:	9a a3       	std	Y+34, r25	; 0x22
 428:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 42a:	8f 8d       	ldd	r24, Y+31	; 0x1f
 42c:	98 a1       	ldd	r25, Y+32	; 0x20
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	98 a3       	std	Y+32, r25	; 0x20
 432:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 434:	8f 8d       	ldd	r24, Y+31	; 0x1f
 436:	98 a1       	ldd	r25, Y+32	; 0x20
 438:	89 2b       	or	r24, r25
 43a:	69 f7       	brne	.-38     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 43c:	14 c0       	rjmp	.+40     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 43e:	6b 8d       	ldd	r22, Y+27	; 0x1b
 440:	7c 8d       	ldd	r23, Y+28	; 0x1c
 442:	8d 8d       	ldd	r24, Y+29	; 0x1d
 444:	9e 8d       	ldd	r25, Y+30	; 0x1e
 446:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fixunssfsi>
 44a:	dc 01       	movw	r26, r24
 44c:	cb 01       	movw	r24, r22
 44e:	98 a3       	std	Y+32, r25	; 0x20
 450:	8f 8f       	std	Y+31, r24	; 0x1f
 452:	8f 8d       	ldd	r24, Y+31	; 0x1f
 454:	98 a1       	ldd	r25, Y+32	; 0x20
 456:	9c a3       	std	Y+36, r25	; 0x24
 458:	8b a3       	std	Y+35, r24	; 0x23
 45a:	8b a1       	ldd	r24, Y+35	; 0x23
 45c:	9c a1       	ldd	r25, Y+36	; 0x24
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 462:	9c a3       	std	Y+36, r25	; 0x24
 464:	8b a3       	std	Y+35, r24	; 0x23
	_delay_ms(2);

	cleanSevenSegmentDisplay();
 466:	0e 94 ac 00 	call	0x158	; 0x158 <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_3, 3);
 46a:	63 e0       	ldi	r22, 0x03	; 3
 46c:	8c ad       	ldd	r24, Y+60	; 0x3c
 46e:	0e 94 65 00 	call	0xca	; 0xca <showSevenSegmentDisplayValue>
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	a0 e0       	ldi	r26, 0x00	; 0
 478:	b0 e4       	ldi	r27, 0x40	; 64
 47a:	8d 87       	std	Y+13, r24	; 0x0d
 47c:	9e 87       	std	Y+14, r25	; 0x0e
 47e:	af 87       	std	Y+15, r26	; 0x0f
 480:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 482:	20 e0       	ldi	r18, 0x00	; 0
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	4a e7       	ldi	r20, 0x7A	; 122
 488:	55 e4       	ldi	r21, 0x45	; 69
 48a:	6d 85       	ldd	r22, Y+13	; 0x0d
 48c:	7e 85       	ldd	r23, Y+14	; 0x0e
 48e:	8f 85       	ldd	r24, Y+15	; 0x0f
 490:	98 89       	ldd	r25, Y+16	; 0x10
 492:	0e 94 ef 03 	call	0x7de	; 0x7de <__mulsf3>
 496:	dc 01       	movw	r26, r24
 498:	cb 01       	movw	r24, r22
 49a:	89 8b       	std	Y+17, r24	; 0x11
 49c:	9a 8b       	std	Y+18, r25	; 0x12
 49e:	ab 8b       	std	Y+19, r26	; 0x13
 4a0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
 4a2:	20 e0       	ldi	r18, 0x00	; 0
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	40 e8       	ldi	r20, 0x80	; 128
 4a8:	5f e3       	ldi	r21, 0x3F	; 63
 4aa:	69 89       	ldd	r22, Y+17	; 0x11
 4ac:	7a 89       	ldd	r23, Y+18	; 0x12
 4ae:	8b 89       	ldd	r24, Y+19	; 0x13
 4b0:	9c 89       	ldd	r25, Y+20	; 0x14
 4b2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__cmpsf2>
 4b6:	88 23       	and	r24, r24
 4b8:	2c f4       	brge	.+10     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
		__ticks = 1;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	9e 8b       	std	Y+22, r25	; 0x16
 4c0:	8d 8b       	std	Y+21, r24	; 0x15
 4c2:	3f c0       	rjmp	.+126    	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
	else if (__tmp > 65535)
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	3f ef       	ldi	r19, 0xFF	; 255
 4c8:	4f e7       	ldi	r20, 0x7F	; 127
 4ca:	57 e4       	ldi	r21, 0x47	; 71
 4cc:	69 89       	ldd	r22, Y+17	; 0x11
 4ce:	7a 89       	ldd	r23, Y+18	; 0x12
 4d0:	8b 89       	ldd	r24, Y+19	; 0x13
 4d2:	9c 89       	ldd	r25, Y+20	; 0x14
 4d4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__gesf2>
 4d8:	18 16       	cp	r1, r24
 4da:	4c f5       	brge	.+82     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	40 e2       	ldi	r20, 0x20	; 32
 4e2:	51 e4       	ldi	r21, 0x41	; 65
 4e4:	6d 85       	ldd	r22, Y+13	; 0x0d
 4e6:	7e 85       	ldd	r23, Y+14	; 0x0e
 4e8:	8f 85       	ldd	r24, Y+15	; 0x0f
 4ea:	98 89       	ldd	r25, Y+16	; 0x10
 4ec:	0e 94 ef 03 	call	0x7de	; 0x7de <__mulsf3>
 4f0:	dc 01       	movw	r26, r24
 4f2:	cb 01       	movw	r24, r22
 4f4:	bc 01       	movw	r22, r24
 4f6:	cd 01       	movw	r24, r26
 4f8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fixunssfsi>
 4fc:	dc 01       	movw	r26, r24
 4fe:	cb 01       	movw	r24, r22
 500:	9e 8b       	std	Y+22, r25	; 0x16
 502:	8d 8b       	std	Y+21, r24	; 0x15
 504:	0f c0       	rjmp	.+30     	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 506:	80 e9       	ldi	r24, 0x90	; 144
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	98 8f       	std	Y+24, r25	; 0x18
 50c:	8f 8b       	std	Y+23, r24	; 0x17
 50e:	8f 89       	ldd	r24, Y+23	; 0x17
 510:	98 8d       	ldd	r25, Y+24	; 0x18
 512:	01 97       	sbiw	r24, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
 516:	98 8f       	std	Y+24, r25	; 0x18
 518:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 51a:	8d 89       	ldd	r24, Y+21	; 0x15
 51c:	9e 89       	ldd	r25, Y+22	; 0x16
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	9e 8b       	std	Y+22, r25	; 0x16
 522:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 524:	8d 89       	ldd	r24, Y+21	; 0x15
 526:	9e 89       	ldd	r25, Y+22	; 0x16
 528:	89 2b       	or	r24, r25
 52a:	69 f7       	brne	.-38     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
	_delay_ms(2);
}
 52c:	14 c0       	rjmp	.+40     	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 52e:	69 89       	ldd	r22, Y+17	; 0x11
 530:	7a 89       	ldd	r23, Y+18	; 0x12
 532:	8b 89       	ldd	r24, Y+19	; 0x13
 534:	9c 89       	ldd	r25, Y+20	; 0x14
 536:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fixunssfsi>
 53a:	dc 01       	movw	r26, r24
 53c:	cb 01       	movw	r24, r22
 53e:	9e 8b       	std	Y+22, r25	; 0x16
 540:	8d 8b       	std	Y+21, r24	; 0x15
 542:	8d 89       	ldd	r24, Y+21	; 0x15
 544:	9e 89       	ldd	r25, Y+22	; 0x16
 546:	9a 8f       	std	Y+26, r25	; 0x1a
 548:	89 8f       	std	Y+25, r24	; 0x19
 54a:	89 8d       	ldd	r24, Y+25	; 0x19
 54c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
 552:	9a 8f       	std	Y+26, r25	; 0x1a
 554:	89 8f       	std	Y+25, r24	; 0x19
 556:	00 00       	nop
 558:	ec 96       	adiw	r28, 0x3c	; 60
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	de bf       	out	0x3e, r29	; 62
 560:	0f be       	out	0x3f, r0	; 63
 562:	cd bf       	out	0x3d, r28	; 61
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	08 95       	ret

0000056a <main>:

// ======================================================================
// Função principal
// ======================================================================

int main(void) {
 56a:	1f 93       	push	r17
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	00 d0       	rcall	.+0      	; 0x572 <main+0x8>
 572:	00 d0       	rcall	.+0      	; 0x574 <main+0xa>
 574:	cd b7       	in	r28, 0x3d	; 61
 576:	de b7       	in	r29, 0x3e	; 62
	uint16_t num0 = 0, num1 = 0;
 578:	1a 82       	std	Y+2, r1	; 0x02
 57a:	19 82       	std	Y+1, r1	; 0x01
 57c:	1c 82       	std	Y+4, r1	; 0x04
 57e:	1b 82       	std	Y+3, r1	; 0x03
	setupSevenSegmentDisplay(); // Inicializa os pinos do display de 7 segmentos
 580:	0e 94 4b 00 	call	0x96	; 0x96 <setupSevenSegmentDisplay>

	while (1) {
		showAllSevenSegmentDisplay((num1)%10, (num1+1)%10, (num1+2)%10, (num1+3)%10);
 584:	8b 81       	ldd	r24, Y+3	; 0x03
 586:	9c 81       	ldd	r25, Y+4	; 0x04
 588:	ac 01       	movw	r20, r24
 58a:	4d 5f       	subi	r20, 0xFD	; 253
 58c:	5f 4f       	sbci	r21, 0xFF	; 255
 58e:	9a 01       	movw	r18, r20
 590:	ad ec       	ldi	r26, 0xCD	; 205
 592:	bc ec       	ldi	r27, 0xCC	; 204
 594:	0e 94 84 04 	call	0x908	; 0x908 <__umulhisi3>
 598:	96 95       	lsr	r25
 59a:	87 95       	ror	r24
 59c:	96 95       	lsr	r25
 59e:	87 95       	ror	r24
 5a0:	96 95       	lsr	r25
 5a2:	87 95       	ror	r24
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	9c 01       	movw	r18, r24
 5aa:	22 0f       	add	r18, r18
 5ac:	33 1f       	adc	r19, r19
 5ae:	22 0f       	add	r18, r18
 5b0:	33 1f       	adc	r19, r19
 5b2:	82 0f       	add	r24, r18
 5b4:	93 1f       	adc	r25, r19
 5b6:	9a 01       	movw	r18, r20
 5b8:	28 1b       	sub	r18, r24
 5ba:	39 0b       	sbc	r19, r25
 5bc:	c9 01       	movw	r24, r18
 5be:	18 2f       	mov	r17, r24
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	9c 81       	ldd	r25, Y+4	; 0x04
 5c4:	ac 01       	movw	r20, r24
 5c6:	4e 5f       	subi	r20, 0xFE	; 254
 5c8:	5f 4f       	sbci	r21, 0xFF	; 255
 5ca:	9a 01       	movw	r18, r20
 5cc:	ad ec       	ldi	r26, 0xCD	; 205
 5ce:	bc ec       	ldi	r27, 0xCC	; 204
 5d0:	0e 94 84 04 	call	0x908	; 0x908 <__umulhisi3>
 5d4:	96 95       	lsr	r25
 5d6:	87 95       	ror	r24
 5d8:	96 95       	lsr	r25
 5da:	87 95       	ror	r24
 5dc:	96 95       	lsr	r25
 5de:	87 95       	ror	r24
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	9c 01       	movw	r18, r24
 5e6:	22 0f       	add	r18, r18
 5e8:	33 1f       	adc	r19, r19
 5ea:	22 0f       	add	r18, r18
 5ec:	33 1f       	adc	r19, r19
 5ee:	82 0f       	add	r24, r18
 5f0:	93 1f       	adc	r25, r19
 5f2:	9a 01       	movw	r18, r20
 5f4:	28 1b       	sub	r18, r24
 5f6:	39 0b       	sbc	r19, r25
 5f8:	c9 01       	movw	r24, r18
 5fa:	f8 2f       	mov	r31, r24
 5fc:	8b 81       	ldd	r24, Y+3	; 0x03
 5fe:	9c 81       	ldd	r25, Y+4	; 0x04
 600:	ac 01       	movw	r20, r24
 602:	4f 5f       	subi	r20, 0xFF	; 255
 604:	5f 4f       	sbci	r21, 0xFF	; 255
 606:	9a 01       	movw	r18, r20
 608:	ad ec       	ldi	r26, 0xCD	; 205
 60a:	bc ec       	ldi	r27, 0xCC	; 204
 60c:	0e 94 84 04 	call	0x908	; 0x908 <__umulhisi3>
 610:	96 95       	lsr	r25
 612:	87 95       	ror	r24
 614:	96 95       	lsr	r25
 616:	87 95       	ror	r24
 618:	96 95       	lsr	r25
 61a:	87 95       	ror	r24
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	9c 01       	movw	r18, r24
 622:	22 0f       	add	r18, r18
 624:	33 1f       	adc	r19, r19
 626:	22 0f       	add	r18, r18
 628:	33 1f       	adc	r19, r19
 62a:	82 0f       	add	r24, r18
 62c:	93 1f       	adc	r25, r19
 62e:	9a 01       	movw	r18, r20
 630:	28 1b       	sub	r18, r24
 632:	39 0b       	sbc	r19, r25
 634:	c9 01       	movw	r24, r18
 636:	e8 2f       	mov	r30, r24
 638:	4b 81       	ldd	r20, Y+3	; 0x03
 63a:	5c 81       	ldd	r21, Y+4	; 0x04
 63c:	9a 01       	movw	r18, r20
 63e:	ad ec       	ldi	r26, 0xCD	; 205
 640:	bc ec       	ldi	r27, 0xCC	; 204
 642:	0e 94 84 04 	call	0x908	; 0x908 <__umulhisi3>
 646:	96 95       	lsr	r25
 648:	87 95       	ror	r24
 64a:	96 95       	lsr	r25
 64c:	87 95       	ror	r24
 64e:	96 95       	lsr	r25
 650:	87 95       	ror	r24
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	9c 01       	movw	r18, r24
 658:	22 0f       	add	r18, r18
 65a:	33 1f       	adc	r19, r19
 65c:	22 0f       	add	r18, r18
 65e:	33 1f       	adc	r19, r19
 660:	82 0f       	add	r24, r18
 662:	93 1f       	adc	r25, r19
 664:	9a 01       	movw	r18, r20
 666:	28 1b       	sub	r18, r24
 668:	39 0b       	sbc	r19, r25
 66a:	c9 01       	movw	r24, r18
 66c:	21 2f       	mov	r18, r17
 66e:	4f 2f       	mov	r20, r31
 670:	6e 2f       	mov	r22, r30
 672:	0e 94 bd 00 	call	0x17a	; 0x17a <showAllSevenSegmentDisplay>

		num0++;
 676:	89 81       	ldd	r24, Y+1	; 0x01
 678:	9a 81       	ldd	r25, Y+2	; 0x02
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	9a 83       	std	Y+2, r25	; 0x02
 67e:	89 83       	std	Y+1, r24	; 0x01
		num1 = (num0/100)%10;
 680:	89 81       	ldd	r24, Y+1	; 0x01
 682:	9a 81       	ldd	r25, Y+2	; 0x02
 684:	96 95       	lsr	r25
 686:	87 95       	ror	r24
 688:	96 95       	lsr	r25
 68a:	87 95       	ror	r24
 68c:	9c 01       	movw	r18, r24
 68e:	ab e7       	ldi	r26, 0x7B	; 123
 690:	b4 e1       	ldi	r27, 0x14	; 20
 692:	0e 94 84 04 	call	0x908	; 0x908 <__umulhisi3>
 696:	ac 01       	movw	r20, r24
 698:	56 95       	lsr	r21
 69a:	47 95       	ror	r20
 69c:	9a 01       	movw	r18, r20
 69e:	ad ec       	ldi	r26, 0xCD	; 205
 6a0:	bc ec       	ldi	r27, 0xCC	; 204
 6a2:	0e 94 84 04 	call	0x908	; 0x908 <__umulhisi3>
 6a6:	96 95       	lsr	r25
 6a8:	87 95       	ror	r24
 6aa:	96 95       	lsr	r25
 6ac:	87 95       	ror	r24
 6ae:	96 95       	lsr	r25
 6b0:	87 95       	ror	r24
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	9c 01       	movw	r18, r24
 6b8:	22 0f       	add	r18, r18
 6ba:	33 1f       	adc	r19, r19
 6bc:	22 0f       	add	r18, r18
 6be:	33 1f       	adc	r19, r19
 6c0:	82 0f       	add	r24, r18
 6c2:	93 1f       	adc	r25, r19
 6c4:	9a 01       	movw	r18, r20
 6c6:	28 1b       	sub	r18, r24
 6c8:	39 0b       	sbc	r19, r25
 6ca:	c9 01       	movw	r24, r18
 6cc:	9c 83       	std	Y+4, r25	; 0x04
 6ce:	8b 83       	std	Y+3, r24	; 0x03
	}
 6d0:	59 cf       	rjmp	.-334    	; 0x584 <main+0x1a>

000006d2 <__cmpsf2>:
 6d2:	0e 94 9d 03 	call	0x73a	; 0x73a <__fp_cmp>
 6d6:	08 f4       	brcc	.+2      	; 0x6da <__cmpsf2+0x8>
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	08 95       	ret

000006dc <__fixunssfsi>:
 6dc:	0e 94 c9 03 	call	0x792	; 0x792 <__fp_splitA>
 6e0:	88 f0       	brcs	.+34     	; 0x704 <__fixunssfsi+0x28>
 6e2:	9f 57       	subi	r25, 0x7F	; 127
 6e4:	98 f0       	brcs	.+38     	; 0x70c <__fixunssfsi+0x30>
 6e6:	b9 2f       	mov	r27, r25
 6e8:	99 27       	eor	r25, r25
 6ea:	b7 51       	subi	r27, 0x17	; 23
 6ec:	b0 f0       	brcs	.+44     	; 0x71a <__fixunssfsi+0x3e>
 6ee:	e1 f0       	breq	.+56     	; 0x728 <__fixunssfsi+0x4c>
 6f0:	66 0f       	add	r22, r22
 6f2:	77 1f       	adc	r23, r23
 6f4:	88 1f       	adc	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	1a f0       	brmi	.+6      	; 0x700 <__fixunssfsi+0x24>
 6fa:	ba 95       	dec	r27
 6fc:	c9 f7       	brne	.-14     	; 0x6f0 <__fixunssfsi+0x14>
 6fe:	14 c0       	rjmp	.+40     	; 0x728 <__fixunssfsi+0x4c>
 700:	b1 30       	cpi	r27, 0x01	; 1
 702:	91 f0       	breq	.+36     	; 0x728 <__fixunssfsi+0x4c>
 704:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fp_zero>
 708:	b1 e0       	ldi	r27, 0x01	; 1
 70a:	08 95       	ret
 70c:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__fp_zero>
 710:	67 2f       	mov	r22, r23
 712:	78 2f       	mov	r23, r24
 714:	88 27       	eor	r24, r24
 716:	b8 5f       	subi	r27, 0xF8	; 248
 718:	39 f0       	breq	.+14     	; 0x728 <__fixunssfsi+0x4c>
 71a:	b9 3f       	cpi	r27, 0xF9	; 249
 71c:	cc f3       	brlt	.-14     	; 0x710 <__fixunssfsi+0x34>
 71e:	86 95       	lsr	r24
 720:	77 95       	ror	r23
 722:	67 95       	ror	r22
 724:	b3 95       	inc	r27
 726:	d9 f7       	brne	.-10     	; 0x71e <__fixunssfsi+0x42>
 728:	3e f4       	brtc	.+14     	; 0x738 <__fixunssfsi+0x5c>
 72a:	90 95       	com	r25
 72c:	80 95       	com	r24
 72e:	70 95       	com	r23
 730:	61 95       	neg	r22
 732:	7f 4f       	sbci	r23, 0xFF	; 255
 734:	8f 4f       	sbci	r24, 0xFF	; 255
 736:	9f 4f       	sbci	r25, 0xFF	; 255
 738:	08 95       	ret

0000073a <__fp_cmp>:
 73a:	99 0f       	add	r25, r25
 73c:	00 08       	sbc	r0, r0
 73e:	55 0f       	add	r21, r21
 740:	aa 0b       	sbc	r26, r26
 742:	e0 e8       	ldi	r30, 0x80	; 128
 744:	fe ef       	ldi	r31, 0xFE	; 254
 746:	16 16       	cp	r1, r22
 748:	17 06       	cpc	r1, r23
 74a:	e8 07       	cpc	r30, r24
 74c:	f9 07       	cpc	r31, r25
 74e:	c0 f0       	brcs	.+48     	; 0x780 <__fp_cmp+0x46>
 750:	12 16       	cp	r1, r18
 752:	13 06       	cpc	r1, r19
 754:	e4 07       	cpc	r30, r20
 756:	f5 07       	cpc	r31, r21
 758:	98 f0       	brcs	.+38     	; 0x780 <__fp_cmp+0x46>
 75a:	62 1b       	sub	r22, r18
 75c:	73 0b       	sbc	r23, r19
 75e:	84 0b       	sbc	r24, r20
 760:	95 0b       	sbc	r25, r21
 762:	39 f4       	brne	.+14     	; 0x772 <__fp_cmp+0x38>
 764:	0a 26       	eor	r0, r26
 766:	61 f0       	breq	.+24     	; 0x780 <__fp_cmp+0x46>
 768:	23 2b       	or	r18, r19
 76a:	24 2b       	or	r18, r20
 76c:	25 2b       	or	r18, r21
 76e:	21 f4       	brne	.+8      	; 0x778 <__fp_cmp+0x3e>
 770:	08 95       	ret
 772:	0a 26       	eor	r0, r26
 774:	09 f4       	brne	.+2      	; 0x778 <__fp_cmp+0x3e>
 776:	a1 40       	sbci	r26, 0x01	; 1
 778:	a6 95       	lsr	r26
 77a:	8f ef       	ldi	r24, 0xFF	; 255
 77c:	81 1d       	adc	r24, r1
 77e:	81 1d       	adc	r24, r1
 780:	08 95       	ret

00000782 <__fp_split3>:
 782:	57 fd       	sbrc	r21, 7
 784:	90 58       	subi	r25, 0x80	; 128
 786:	44 0f       	add	r20, r20
 788:	55 1f       	adc	r21, r21
 78a:	59 f0       	breq	.+22     	; 0x7a2 <__fp_splitA+0x10>
 78c:	5f 3f       	cpi	r21, 0xFF	; 255
 78e:	71 f0       	breq	.+28     	; 0x7ac <__fp_splitA+0x1a>
 790:	47 95       	ror	r20

00000792 <__fp_splitA>:
 792:	88 0f       	add	r24, r24
 794:	97 fb       	bst	r25, 7
 796:	99 1f       	adc	r25, r25
 798:	61 f0       	breq	.+24     	; 0x7b2 <__fp_splitA+0x20>
 79a:	9f 3f       	cpi	r25, 0xFF	; 255
 79c:	79 f0       	breq	.+30     	; 0x7bc <__fp_splitA+0x2a>
 79e:	87 95       	ror	r24
 7a0:	08 95       	ret
 7a2:	12 16       	cp	r1, r18
 7a4:	13 06       	cpc	r1, r19
 7a6:	14 06       	cpc	r1, r20
 7a8:	55 1f       	adc	r21, r21
 7aa:	f2 cf       	rjmp	.-28     	; 0x790 <__fp_split3+0xe>
 7ac:	46 95       	lsr	r20
 7ae:	f1 df       	rcall	.-30     	; 0x792 <__fp_splitA>
 7b0:	08 c0       	rjmp	.+16     	; 0x7c2 <__fp_splitA+0x30>
 7b2:	16 16       	cp	r1, r22
 7b4:	17 06       	cpc	r1, r23
 7b6:	18 06       	cpc	r1, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	f1 cf       	rjmp	.-30     	; 0x79e <__fp_splitA+0xc>
 7bc:	86 95       	lsr	r24
 7be:	71 05       	cpc	r23, r1
 7c0:	61 05       	cpc	r22, r1
 7c2:	08 94       	sec
 7c4:	08 95       	ret

000007c6 <__fp_zero>:
 7c6:	e8 94       	clt

000007c8 <__fp_szero>:
 7c8:	bb 27       	eor	r27, r27
 7ca:	66 27       	eor	r22, r22
 7cc:	77 27       	eor	r23, r23
 7ce:	cb 01       	movw	r24, r22
 7d0:	97 f9       	bld	r25, 7
 7d2:	08 95       	ret

000007d4 <__gesf2>:
 7d4:	0e 94 9d 03 	call	0x73a	; 0x73a <__fp_cmp>
 7d8:	08 f4       	brcc	.+2      	; 0x7dc <__gesf2+0x8>
 7da:	8f ef       	ldi	r24, 0xFF	; 255
 7dc:	08 95       	ret

000007de <__mulsf3>:
 7de:	0e 94 02 04 	call	0x804	; 0x804 <__mulsf3x>
 7e2:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__fp_round>
 7e6:	0e 94 65 04 	call	0x8ca	; 0x8ca <__fp_pscA>
 7ea:	38 f0       	brcs	.+14     	; 0x7fa <__mulsf3+0x1c>
 7ec:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_pscB>
 7f0:	20 f0       	brcs	.+8      	; 0x7fa <__mulsf3+0x1c>
 7f2:	95 23       	and	r25, r21
 7f4:	11 f0       	breq	.+4      	; 0x7fa <__mulsf3+0x1c>
 7f6:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__fp_inf>
 7fa:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_nan>
 7fe:	11 24       	eor	r1, r1
 800:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_szero>

00000804 <__mulsf3x>:
 804:	0e 94 c1 03 	call	0x782	; 0x782 <__fp_split3>
 808:	70 f3       	brcs	.-36     	; 0x7e6 <__mulsf3+0x8>

0000080a <__mulsf3_pse>:
 80a:	95 9f       	mul	r25, r21
 80c:	c1 f3       	breq	.-16     	; 0x7fe <__mulsf3+0x20>
 80e:	95 0f       	add	r25, r21
 810:	50 e0       	ldi	r21, 0x00	; 0
 812:	55 1f       	adc	r21, r21
 814:	62 9f       	mul	r22, r18
 816:	f0 01       	movw	r30, r0
 818:	72 9f       	mul	r23, r18
 81a:	bb 27       	eor	r27, r27
 81c:	f0 0d       	add	r31, r0
 81e:	b1 1d       	adc	r27, r1
 820:	63 9f       	mul	r22, r19
 822:	aa 27       	eor	r26, r26
 824:	f0 0d       	add	r31, r0
 826:	b1 1d       	adc	r27, r1
 828:	aa 1f       	adc	r26, r26
 82a:	64 9f       	mul	r22, r20
 82c:	66 27       	eor	r22, r22
 82e:	b0 0d       	add	r27, r0
 830:	a1 1d       	adc	r26, r1
 832:	66 1f       	adc	r22, r22
 834:	82 9f       	mul	r24, r18
 836:	22 27       	eor	r18, r18
 838:	b0 0d       	add	r27, r0
 83a:	a1 1d       	adc	r26, r1
 83c:	62 1f       	adc	r22, r18
 83e:	73 9f       	mul	r23, r19
 840:	b0 0d       	add	r27, r0
 842:	a1 1d       	adc	r26, r1
 844:	62 1f       	adc	r22, r18
 846:	83 9f       	mul	r24, r19
 848:	a0 0d       	add	r26, r0
 84a:	61 1d       	adc	r22, r1
 84c:	22 1f       	adc	r18, r18
 84e:	74 9f       	mul	r23, r20
 850:	33 27       	eor	r19, r19
 852:	a0 0d       	add	r26, r0
 854:	61 1d       	adc	r22, r1
 856:	23 1f       	adc	r18, r19
 858:	84 9f       	mul	r24, r20
 85a:	60 0d       	add	r22, r0
 85c:	21 1d       	adc	r18, r1
 85e:	82 2f       	mov	r24, r18
 860:	76 2f       	mov	r23, r22
 862:	6a 2f       	mov	r22, r26
 864:	11 24       	eor	r1, r1
 866:	9f 57       	subi	r25, 0x7F	; 127
 868:	50 40       	sbci	r21, 0x00	; 0
 86a:	9a f0       	brmi	.+38     	; 0x892 <__mulsf3_pse+0x88>
 86c:	f1 f0       	breq	.+60     	; 0x8aa <__mulsf3_pse+0xa0>
 86e:	88 23       	and	r24, r24
 870:	4a f0       	brmi	.+18     	; 0x884 <__mulsf3_pse+0x7a>
 872:	ee 0f       	add	r30, r30
 874:	ff 1f       	adc	r31, r31
 876:	bb 1f       	adc	r27, r27
 878:	66 1f       	adc	r22, r22
 87a:	77 1f       	adc	r23, r23
 87c:	88 1f       	adc	r24, r24
 87e:	91 50       	subi	r25, 0x01	; 1
 880:	50 40       	sbci	r21, 0x00	; 0
 882:	a9 f7       	brne	.-22     	; 0x86e <__mulsf3_pse+0x64>
 884:	9e 3f       	cpi	r25, 0xFE	; 254
 886:	51 05       	cpc	r21, r1
 888:	80 f0       	brcs	.+32     	; 0x8aa <__mulsf3_pse+0xa0>
 88a:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__fp_inf>
 88e:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__fp_szero>
 892:	5f 3f       	cpi	r21, 0xFF	; 255
 894:	e4 f3       	brlt	.-8      	; 0x88e <__mulsf3_pse+0x84>
 896:	98 3e       	cpi	r25, 0xE8	; 232
 898:	d4 f3       	brlt	.-12     	; 0x88e <__mulsf3_pse+0x84>
 89a:	86 95       	lsr	r24
 89c:	77 95       	ror	r23
 89e:	67 95       	ror	r22
 8a0:	b7 95       	ror	r27
 8a2:	f7 95       	ror	r31
 8a4:	e7 95       	ror	r30
 8a6:	9f 5f       	subi	r25, 0xFF	; 255
 8a8:	c1 f7       	brne	.-16     	; 0x89a <__mulsf3_pse+0x90>
 8aa:	fe 2b       	or	r31, r30
 8ac:	88 0f       	add	r24, r24
 8ae:	91 1d       	adc	r25, r1
 8b0:	96 95       	lsr	r25
 8b2:	87 95       	ror	r24
 8b4:	97 f9       	bld	r25, 7
 8b6:	08 95       	ret

000008b8 <__fp_inf>:
 8b8:	97 f9       	bld	r25, 7
 8ba:	9f 67       	ori	r25, 0x7F	; 127
 8bc:	80 e8       	ldi	r24, 0x80	; 128
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	60 e0       	ldi	r22, 0x00	; 0
 8c2:	08 95       	ret

000008c4 <__fp_nan>:
 8c4:	9f ef       	ldi	r25, 0xFF	; 255
 8c6:	80 ec       	ldi	r24, 0xC0	; 192
 8c8:	08 95       	ret

000008ca <__fp_pscA>:
 8ca:	00 24       	eor	r0, r0
 8cc:	0a 94       	dec	r0
 8ce:	16 16       	cp	r1, r22
 8d0:	17 06       	cpc	r1, r23
 8d2:	18 06       	cpc	r1, r24
 8d4:	09 06       	cpc	r0, r25
 8d6:	08 95       	ret

000008d8 <__fp_pscB>:
 8d8:	00 24       	eor	r0, r0
 8da:	0a 94       	dec	r0
 8dc:	12 16       	cp	r1, r18
 8de:	13 06       	cpc	r1, r19
 8e0:	14 06       	cpc	r1, r20
 8e2:	05 06       	cpc	r0, r21
 8e4:	08 95       	ret

000008e6 <__fp_round>:
 8e6:	09 2e       	mov	r0, r25
 8e8:	03 94       	inc	r0
 8ea:	00 0c       	add	r0, r0
 8ec:	11 f4       	brne	.+4      	; 0x8f2 <__fp_round+0xc>
 8ee:	88 23       	and	r24, r24
 8f0:	52 f0       	brmi	.+20     	; 0x906 <__stack+0x7>
 8f2:	bb 0f       	add	r27, r27
 8f4:	40 f4       	brcc	.+16     	; 0x906 <__stack+0x7>
 8f6:	bf 2b       	or	r27, r31
 8f8:	11 f4       	brne	.+4      	; 0x8fe <__fp_round+0x18>
 8fa:	60 ff       	sbrs	r22, 0
 8fc:	04 c0       	rjmp	.+8      	; 0x906 <__stack+0x7>
 8fe:	6f 5f       	subi	r22, 0xFF	; 255
 900:	7f 4f       	sbci	r23, 0xFF	; 255
 902:	8f 4f       	sbci	r24, 0xFF	; 255
 904:	9f 4f       	sbci	r25, 0xFF	; 255
 906:	08 95       	ret

00000908 <__umulhisi3>:
 908:	a2 9f       	mul	r26, r18
 90a:	b0 01       	movw	r22, r0
 90c:	b3 9f       	mul	r27, r19
 90e:	c0 01       	movw	r24, r0
 910:	a3 9f       	mul	r26, r19
 912:	70 0d       	add	r23, r0
 914:	81 1d       	adc	r24, r1
 916:	11 24       	eor	r1, r1
 918:	91 1d       	adc	r25, r1
 91a:	b2 9f       	mul	r27, r18
 91c:	70 0d       	add	r23, r0
 91e:	81 1d       	adc	r24, r1
 920:	11 24       	eor	r1, r1
 922:	91 1d       	adc	r25, r1
 924:	08 95       	ret

00000926 <_exit>:
 926:	f8 94       	cli

00000928 <__stop_program>:
 928:	ff cf       	rjmp	.-2      	; 0x928 <__stop_program>
