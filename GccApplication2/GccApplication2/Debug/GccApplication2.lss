
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000a30  00000ac4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800110  00800110  00000ad4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b13  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000781  00000000  00000000  000016b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000686  00000000  00000000  00001e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  000024c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000071d5  00000000  00000000  0000263c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000317  00000000  00000000  00009811  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00009b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002912  00000000  00000000  00009b90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c4 03 	call	0x788	; 0x788 <main>
  9e:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setupSevenSegmentDisplay>:
	0x33, 0x5B, 0x5F, 0x70,
	0x7F, 0x7B, 0x77, 0x1F,
	0x4E, 0x3D, 0x4F, 0x47
};

void setupSevenSegmentDisplay(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	DDRD |= 0x7F;  // PD0-PD6 como saída (segmentos)
  ae:	8a e2       	ldi	r24, 0x2A	; 42
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	2a e2       	ldi	r18, 0x2A	; 42
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	20 81       	ld	r18, Z
  ba:	2f 67       	ori	r18, 0x7F	; 127
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
	DDRB |= 0x0F;  // PB0-PB3 como saída (seleção dos dígitos)
  c0:	84 e2       	ldi	r24, 0x24	; 36
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	24 e2       	ldi	r18, 0x24	; 36
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	20 81       	ld	r18, Z
  cc:	2f 60       	ori	r18, 0x0F	; 15
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
}
  d2:	00 00       	nop
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <showSevenSegmentDisplayValue>:

void showSevenSegmentDisplayValue(uint8_t value, uint8_t displayAddress) {
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <showSevenSegmentDisplayValue+0x6>
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	89 83       	std	Y+1, r24	; 0x01
  e6:	6a 83       	std	Y+2, r22	; 0x02
	if (value < 16) {
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	80 31       	cpi	r24, 0x10	; 16
  ec:	c8 f4       	brcc	.+50     	; 0x120 <showSevenSegmentDisplayValue+0x46>
		PORTD &= 0x80;  // Limpa segmentos
  ee:	8b e2       	ldi	r24, 0x2B	; 43
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	2b e2       	ldi	r18, 0x2B	; 43
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	f9 01       	movw	r30, r18
  f8:	20 81       	ld	r18, Z
  fa:	20 78       	andi	r18, 0x80	; 128
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
		PORTD |= sevenSegmentCode[value];
 100:	8b e2       	ldi	r24, 0x2B	; 43
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	2b e2       	ldi	r18, 0x2B	; 43
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	40 81       	ld	r20, Z
 10c:	29 81       	ldd	r18, Y+1	; 0x01
 10e:	22 2f       	mov	r18, r18
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	20 50       	subi	r18, 0x00	; 0
 114:	3f 4f       	sbci	r19, 0xFF	; 255
 116:	f9 01       	movw	r30, r18
 118:	20 81       	ld	r18, Z
 11a:	24 2b       	or	r18, r20
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
	}

	PORTB &= 0xF0;                    // Limpa PB0–PB3
 120:	85 e2       	ldi	r24, 0x25	; 37
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	25 e2       	ldi	r18, 0x25	; 37
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	f9 01       	movw	r30, r18
 12a:	20 81       	ld	r18, Z
 12c:	20 7f       	andi	r18, 0xF0	; 240
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18
	PORTB |= ((1 << displayAddress) & 0x0F);  // Seleciona o display
 132:	85 e2       	ldi	r24, 0x25	; 37
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	25 e2       	ldi	r18, 0x25	; 37
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	f9 01       	movw	r30, r18
 13c:	20 81       	ld	r18, Z
 13e:	62 2f       	mov	r22, r18
 140:	2a 81       	ldd	r18, Y+2	; 0x02
 142:	42 2f       	mov	r20, r18
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <showSevenSegmentDisplayValue+0x76>
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
 150:	4a 95       	dec	r20
 152:	e2 f7       	brpl	.-8      	; 0x14c <showSevenSegmentDisplayValue+0x72>
 154:	2f 70       	andi	r18, 0x0F	; 15
 156:	26 2b       	or	r18, r22
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
}
 15c:	00 00       	nop
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <cleanSevenSegmentDisplay>:

void cleanSevenSegmentDisplay(void) {
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
	PORTB &= 0xF0;  // Desliga todos os displays
 170:	85 e2       	ldi	r24, 0x25	; 37
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	25 e2       	ldi	r18, 0x25	; 37
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	f9 01       	movw	r30, r18
 17a:	20 81       	ld	r18, Z
 17c:	20 7f       	andi	r18, 0xF0	; 240
 17e:	fc 01       	movw	r30, r24
 180:	20 83       	st	Z, r18
}
 182:	00 00       	nop
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <showAllSevenSegmentDisplay>:

void showAllSevenSegmentDisplay(uint8_t valueDisp_0, uint8_t valueDisp_1, uint8_t valueDisp_2, uint8_t valueDisp_3) {
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	ec 97       	sbiw	r28, 0x3c	; 60
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	89 af       	std	Y+57, r24	; 0x39
 1a0:	6a af       	std	Y+58, r22	; 0x3a
 1a2:	4b af       	std	Y+59, r20	; 0x3b
 1a4:	2c af       	std	Y+60, r18	; 0x3c
	cleanSevenSegmentDisplay();
 1a6:	0e 94 b4 00 	call	0x168	; 0x168 <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_0, 0);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	89 ad       	ldd	r24, Y+57	; 0x39
 1ae:	0e 94 6d 00 	call	0xda	; 0xda <showSevenSegmentDisplayValue>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	a0 e0       	ldi	r26, 0x00	; 0
 1b8:	b0 e4       	ldi	r27, 0x40	; 64
 1ba:	89 83       	std	Y+1, r24	; 0x01
 1bc:	9a 83       	std	Y+2, r25	; 0x02
 1be:	ab 83       	std	Y+3, r26	; 0x03
 1c0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	4a e7       	ldi	r20, 0x7A	; 122
 1c8:	55 e4       	ldi	r21, 0x45	; 69
 1ca:	69 81       	ldd	r22, Y+1	; 0x01
 1cc:	7a 81       	ldd	r23, Y+2	; 0x02
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	9c 81       	ldd	r25, Y+4	; 0x04
 1d2:	0e 94 81 04 	call	0x902	; 0x902 <__mulsf3>
 1d6:	dc 01       	movw	r26, r24
 1d8:	cb 01       	movw	r24, r22
 1da:	8f a7       	std	Y+47, r24	; 0x2f
 1dc:	98 ab       	std	Y+48, r25	; 0x30
 1de:	a9 ab       	std	Y+49, r26	; 0x31
 1e0:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 e8       	ldi	r20, 0x80	; 128
 1e8:	5f e3       	ldi	r21, 0x3F	; 63
 1ea:	6f a5       	ldd	r22, Y+47	; 0x2f
 1ec:	78 a9       	ldd	r23, Y+48	; 0x30
 1ee:	89 a9       	ldd	r24, Y+49	; 0x31
 1f0:	9a a9       	ldd	r25, Y+50	; 0x32
 1f2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__cmpsf2>
 1f6:	88 23       	and	r24, r24
 1f8:	2c f4       	brge	.+10     	; 0x204 <showAllSevenSegmentDisplay+0x7a>
		__ticks = 1;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	9c ab       	std	Y+52, r25	; 0x34
 200:	8b ab       	std	Y+51, r24	; 0x33
 202:	3f c0       	rjmp	.+126    	; 0x282 <showAllSevenSegmentDisplay+0xf8>
	else if (__tmp > 65535)
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	3f ef       	ldi	r19, 0xFF	; 255
 208:	4f e7       	ldi	r20, 0x7F	; 127
 20a:	57 e4       	ldi	r21, 0x47	; 71
 20c:	6f a5       	ldd	r22, Y+47	; 0x2f
 20e:	78 a9       	ldd	r23, Y+48	; 0x30
 210:	89 a9       	ldd	r24, Y+49	; 0x31
 212:	9a a9       	ldd	r25, Y+50	; 0x32
 214:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__gesf2>
 218:	18 16       	cp	r1, r24
 21a:	4c f5       	brge	.+82     	; 0x26e <showAllSevenSegmentDisplay+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	40 e2       	ldi	r20, 0x20	; 32
 222:	51 e4       	ldi	r21, 0x41	; 65
 224:	69 81       	ldd	r22, Y+1	; 0x01
 226:	7a 81       	ldd	r23, Y+2	; 0x02
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	9c 81       	ldd	r25, Y+4	; 0x04
 22c:	0e 94 81 04 	call	0x902	; 0x902 <__mulsf3>
 230:	dc 01       	movw	r26, r24
 232:	cb 01       	movw	r24, r22
 234:	bc 01       	movw	r22, r24
 236:	cd 01       	movw	r24, r26
 238:	0e 94 00 04 	call	0x800	; 0x800 <__fixunssfsi>
 23c:	dc 01       	movw	r26, r24
 23e:	cb 01       	movw	r24, r22
 240:	9c ab       	std	Y+52, r25	; 0x34
 242:	8b ab       	std	Y+51, r24	; 0x33
 244:	0f c0       	rjmp	.+30     	; 0x264 <showAllSevenSegmentDisplay+0xda>
 246:	80 e9       	ldi	r24, 0x90	; 144
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	9e ab       	std	Y+54, r25	; 0x36
 24c:	8d ab       	std	Y+53, r24	; 0x35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 24e:	8d a9       	ldd	r24, Y+53	; 0x35
 250:	9e a9       	ldd	r25, Y+54	; 0x36
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <showAllSevenSegmentDisplay+0xc8>
 256:	9e ab       	std	Y+54, r25	; 0x36
 258:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 25a:	8b a9       	ldd	r24, Y+51	; 0x33
 25c:	9c a9       	ldd	r25, Y+52	; 0x34
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	9c ab       	std	Y+52, r25	; 0x34
 262:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 264:	8b a9       	ldd	r24, Y+51	; 0x33
 266:	9c a9       	ldd	r25, Y+52	; 0x34
 268:	89 2b       	or	r24, r25
 26a:	69 f7       	brne	.-38     	; 0x246 <showAllSevenSegmentDisplay+0xbc>
 26c:	14 c0       	rjmp	.+40     	; 0x296 <showAllSevenSegmentDisplay+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 26e:	6f a5       	ldd	r22, Y+47	; 0x2f
 270:	78 a9       	ldd	r23, Y+48	; 0x30
 272:	89 a9       	ldd	r24, Y+49	; 0x31
 274:	9a a9       	ldd	r25, Y+50	; 0x32
 276:	0e 94 00 04 	call	0x800	; 0x800 <__fixunssfsi>
 27a:	dc 01       	movw	r26, r24
 27c:	cb 01       	movw	r24, r22
 27e:	9c ab       	std	Y+52, r25	; 0x34
 280:	8b ab       	std	Y+51, r24	; 0x33
 282:	8b a9       	ldd	r24, Y+51	; 0x33
 284:	9c a9       	ldd	r25, Y+52	; 0x34
 286:	98 af       	std	Y+56, r25	; 0x38
 288:	8f ab       	std	Y+55, r24	; 0x37
 28a:	8f a9       	ldd	r24, Y+55	; 0x37
 28c:	98 ad       	ldd	r25, Y+56	; 0x38
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <showAllSevenSegmentDisplay+0x104>
 292:	98 af       	std	Y+56, r25	; 0x38
 294:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(2);

	cleanSevenSegmentDisplay();
 296:	0e 94 b4 00 	call	0x168	; 0x168 <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_1, 1);
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	8a ad       	ldd	r24, Y+58	; 0x3a
 29e:	0e 94 6d 00 	call	0xda	; 0xda <showSevenSegmentDisplayValue>
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	a0 e0       	ldi	r26, 0x00	; 0
 2a8:	b0 e4       	ldi	r27, 0x40	; 64
 2aa:	8d 83       	std	Y+5, r24	; 0x05
 2ac:	9e 83       	std	Y+6, r25	; 0x06
 2ae:	af 83       	std	Y+7, r26	; 0x07
 2b0:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	4a e7       	ldi	r20, 0x7A	; 122
 2b8:	55 e4       	ldi	r21, 0x45	; 69
 2ba:	6d 81       	ldd	r22, Y+5	; 0x05
 2bc:	7e 81       	ldd	r23, Y+6	; 0x06
 2be:	8f 81       	ldd	r24, Y+7	; 0x07
 2c0:	98 85       	ldd	r25, Y+8	; 0x08
 2c2:	0e 94 81 04 	call	0x902	; 0x902 <__mulsf3>
 2c6:	dc 01       	movw	r26, r24
 2c8:	cb 01       	movw	r24, r22
 2ca:	8d a3       	std	Y+37, r24	; 0x25
 2cc:	9e a3       	std	Y+38, r25	; 0x26
 2ce:	af a3       	std	Y+39, r26	; 0x27
 2d0:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	40 e8       	ldi	r20, 0x80	; 128
 2d8:	5f e3       	ldi	r21, 0x3F	; 63
 2da:	6d a1       	ldd	r22, Y+37	; 0x25
 2dc:	7e a1       	ldd	r23, Y+38	; 0x26
 2de:	8f a1       	ldd	r24, Y+39	; 0x27
 2e0:	98 a5       	ldd	r25, Y+40	; 0x28
 2e2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__cmpsf2>
 2e6:	88 23       	and	r24, r24
 2e8:	2c f4       	brge	.+10     	; 0x2f4 <showAllSevenSegmentDisplay+0x16a>
		__ticks = 1;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	9a a7       	std	Y+42, r25	; 0x2a
 2f0:	89 a7       	std	Y+41, r24	; 0x29
 2f2:	3f c0       	rjmp	.+126    	; 0x372 <showAllSevenSegmentDisplay+0x1e8>
	else if (__tmp > 65535)
 2f4:	20 e0       	ldi	r18, 0x00	; 0
 2f6:	3f ef       	ldi	r19, 0xFF	; 255
 2f8:	4f e7       	ldi	r20, 0x7F	; 127
 2fa:	57 e4       	ldi	r21, 0x47	; 71
 2fc:	6d a1       	ldd	r22, Y+37	; 0x25
 2fe:	7e a1       	ldd	r23, Y+38	; 0x26
 300:	8f a1       	ldd	r24, Y+39	; 0x27
 302:	98 a5       	ldd	r25, Y+40	; 0x28
 304:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__gesf2>
 308:	18 16       	cp	r1, r24
 30a:	4c f5       	brge	.+82     	; 0x35e <showAllSevenSegmentDisplay+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	40 e2       	ldi	r20, 0x20	; 32
 312:	51 e4       	ldi	r21, 0x41	; 65
 314:	6d 81       	ldd	r22, Y+5	; 0x05
 316:	7e 81       	ldd	r23, Y+6	; 0x06
 318:	8f 81       	ldd	r24, Y+7	; 0x07
 31a:	98 85       	ldd	r25, Y+8	; 0x08
 31c:	0e 94 81 04 	call	0x902	; 0x902 <__mulsf3>
 320:	dc 01       	movw	r26, r24
 322:	cb 01       	movw	r24, r22
 324:	bc 01       	movw	r22, r24
 326:	cd 01       	movw	r24, r26
 328:	0e 94 00 04 	call	0x800	; 0x800 <__fixunssfsi>
 32c:	dc 01       	movw	r26, r24
 32e:	cb 01       	movw	r24, r22
 330:	9a a7       	std	Y+42, r25	; 0x2a
 332:	89 a7       	std	Y+41, r24	; 0x29
 334:	0f c0       	rjmp	.+30     	; 0x354 <showAllSevenSegmentDisplay+0x1ca>
 336:	80 e9       	ldi	r24, 0x90	; 144
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	9c a7       	std	Y+44, r25	; 0x2c
 33c:	8b a7       	std	Y+43, r24	; 0x2b
 33e:	8b a5       	ldd	r24, Y+43	; 0x2b
 340:	9c a5       	ldd	r25, Y+44	; 0x2c
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <showAllSevenSegmentDisplay+0x1b8>
 346:	9c a7       	std	Y+44, r25	; 0x2c
 348:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 34a:	89 a5       	ldd	r24, Y+41	; 0x29
 34c:	9a a5       	ldd	r25, Y+42	; 0x2a
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	9a a7       	std	Y+42, r25	; 0x2a
 352:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 354:	89 a5       	ldd	r24, Y+41	; 0x29
 356:	9a a5       	ldd	r25, Y+42	; 0x2a
 358:	89 2b       	or	r24, r25
 35a:	69 f7       	brne	.-38     	; 0x336 <showAllSevenSegmentDisplay+0x1ac>
 35c:	14 c0       	rjmp	.+40     	; 0x386 <showAllSevenSegmentDisplay+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 35e:	6d a1       	ldd	r22, Y+37	; 0x25
 360:	7e a1       	ldd	r23, Y+38	; 0x26
 362:	8f a1       	ldd	r24, Y+39	; 0x27
 364:	98 a5       	ldd	r25, Y+40	; 0x28
 366:	0e 94 00 04 	call	0x800	; 0x800 <__fixunssfsi>
 36a:	dc 01       	movw	r26, r24
 36c:	cb 01       	movw	r24, r22
 36e:	9a a7       	std	Y+42, r25	; 0x2a
 370:	89 a7       	std	Y+41, r24	; 0x29
 372:	89 a5       	ldd	r24, Y+41	; 0x29
 374:	9a a5       	ldd	r25, Y+42	; 0x2a
 376:	9e a7       	std	Y+46, r25	; 0x2e
 378:	8d a7       	std	Y+45, r24	; 0x2d
 37a:	8d a5       	ldd	r24, Y+45	; 0x2d
 37c:	9e a5       	ldd	r25, Y+46	; 0x2e
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <showAllSevenSegmentDisplay+0x1f4>
 382:	9e a7       	std	Y+46, r25	; 0x2e
 384:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(2);

	cleanSevenSegmentDisplay();
 386:	0e 94 b4 00 	call	0x168	; 0x168 <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_2, 2);
 38a:	62 e0       	ldi	r22, 0x02	; 2
 38c:	8b ad       	ldd	r24, Y+59	; 0x3b
 38e:	0e 94 6d 00 	call	0xda	; 0xda <showSevenSegmentDisplayValue>
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	a0 e0       	ldi	r26, 0x00	; 0
 398:	b0 e4       	ldi	r27, 0x40	; 64
 39a:	89 87       	std	Y+9, r24	; 0x09
 39c:	9a 87       	std	Y+10, r25	; 0x0a
 39e:	ab 87       	std	Y+11, r26	; 0x0b
 3a0:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	4a e7       	ldi	r20, 0x7A	; 122
 3a8:	55 e4       	ldi	r21, 0x45	; 69
 3aa:	69 85       	ldd	r22, Y+9	; 0x09
 3ac:	7a 85       	ldd	r23, Y+10	; 0x0a
 3ae:	8b 85       	ldd	r24, Y+11	; 0x0b
 3b0:	9c 85       	ldd	r25, Y+12	; 0x0c
 3b2:	0e 94 81 04 	call	0x902	; 0x902 <__mulsf3>
 3b6:	dc 01       	movw	r26, r24
 3b8:	cb 01       	movw	r24, r22
 3ba:	8b 8f       	std	Y+27, r24	; 0x1b
 3bc:	9c 8f       	std	Y+28, r25	; 0x1c
 3be:	ad 8f       	std	Y+29, r26	; 0x1d
 3c0:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
 3c2:	20 e0       	ldi	r18, 0x00	; 0
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	40 e8       	ldi	r20, 0x80	; 128
 3c8:	5f e3       	ldi	r21, 0x3F	; 63
 3ca:	6b 8d       	ldd	r22, Y+27	; 0x1b
 3cc:	7c 8d       	ldd	r23, Y+28	; 0x1c
 3ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
 3d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
 3d2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__cmpsf2>
 3d6:	88 23       	and	r24, r24
 3d8:	2c f4       	brge	.+10     	; 0x3e4 <showAllSevenSegmentDisplay+0x25a>
		__ticks = 1;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	98 a3       	std	Y+32, r25	; 0x20
 3e0:	8f 8f       	std	Y+31, r24	; 0x1f
 3e2:	3f c0       	rjmp	.+126    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
	else if (__tmp > 65535)
 3e4:	20 e0       	ldi	r18, 0x00	; 0
 3e6:	3f ef       	ldi	r19, 0xFF	; 255
 3e8:	4f e7       	ldi	r20, 0x7F	; 127
 3ea:	57 e4       	ldi	r21, 0x47	; 71
 3ec:	6b 8d       	ldd	r22, Y+27	; 0x1b
 3ee:	7c 8d       	ldd	r23, Y+28	; 0x1c
 3f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
 3f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
 3f4:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__gesf2>
 3f8:	18 16       	cp	r1, r24
 3fa:	4c f5       	brge	.+82     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	40 e2       	ldi	r20, 0x20	; 32
 402:	51 e4       	ldi	r21, 0x41	; 65
 404:	69 85       	ldd	r22, Y+9	; 0x09
 406:	7a 85       	ldd	r23, Y+10	; 0x0a
 408:	8b 85       	ldd	r24, Y+11	; 0x0b
 40a:	9c 85       	ldd	r25, Y+12	; 0x0c
 40c:	0e 94 81 04 	call	0x902	; 0x902 <__mulsf3>
 410:	dc 01       	movw	r26, r24
 412:	cb 01       	movw	r24, r22
 414:	bc 01       	movw	r22, r24
 416:	cd 01       	movw	r24, r26
 418:	0e 94 00 04 	call	0x800	; 0x800 <__fixunssfsi>
 41c:	dc 01       	movw	r26, r24
 41e:	cb 01       	movw	r24, r22
 420:	98 a3       	std	Y+32, r25	; 0x20
 422:	8f 8f       	std	Y+31, r24	; 0x1f
 424:	0f c0       	rjmp	.+30     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 426:	80 e9       	ldi	r24, 0x90	; 144
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	9a a3       	std	Y+34, r25	; 0x22
 42c:	89 a3       	std	Y+33, r24	; 0x21
 42e:	89 a1       	ldd	r24, Y+33	; 0x21
 430:	9a a1       	ldd	r25, Y+34	; 0x22
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 436:	9a a3       	std	Y+34, r25	; 0x22
 438:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 43a:	8f 8d       	ldd	r24, Y+31	; 0x1f
 43c:	98 a1       	ldd	r25, Y+32	; 0x20
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	98 a3       	std	Y+32, r25	; 0x20
 442:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 444:	8f 8d       	ldd	r24, Y+31	; 0x1f
 446:	98 a1       	ldd	r25, Y+32	; 0x20
 448:	89 2b       	or	r24, r25
 44a:	69 f7       	brne	.-38     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 44c:	14 c0       	rjmp	.+40     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 44e:	6b 8d       	ldd	r22, Y+27	; 0x1b
 450:	7c 8d       	ldd	r23, Y+28	; 0x1c
 452:	8d 8d       	ldd	r24, Y+29	; 0x1d
 454:	9e 8d       	ldd	r25, Y+30	; 0x1e
 456:	0e 94 00 04 	call	0x800	; 0x800 <__fixunssfsi>
 45a:	dc 01       	movw	r26, r24
 45c:	cb 01       	movw	r24, r22
 45e:	98 a3       	std	Y+32, r25	; 0x20
 460:	8f 8f       	std	Y+31, r24	; 0x1f
 462:	8f 8d       	ldd	r24, Y+31	; 0x1f
 464:	98 a1       	ldd	r25, Y+32	; 0x20
 466:	9c a3       	std	Y+36, r25	; 0x24
 468:	8b a3       	std	Y+35, r24	; 0x23
 46a:	8b a1       	ldd	r24, Y+35	; 0x23
 46c:	9c a1       	ldd	r25, Y+36	; 0x24
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 472:	9c a3       	std	Y+36, r25	; 0x24
 474:	8b a3       	std	Y+35, r24	; 0x23
	_delay_ms(2);

	cleanSevenSegmentDisplay();
 476:	0e 94 b4 00 	call	0x168	; 0x168 <cleanSevenSegmentDisplay>
	showSevenSegmentDisplayValue(valueDisp_3, 3);
 47a:	63 e0       	ldi	r22, 0x03	; 3
 47c:	8c ad       	ldd	r24, Y+60	; 0x3c
 47e:	0e 94 6d 00 	call	0xda	; 0xda <showSevenSegmentDisplayValue>
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	a0 e0       	ldi	r26, 0x00	; 0
 488:	b0 e4       	ldi	r27, 0x40	; 64
 48a:	8d 87       	std	Y+13, r24	; 0x0d
 48c:	9e 87       	std	Y+14, r25	; 0x0e
 48e:	af 87       	std	Y+15, r26	; 0x0f
 490:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	4a e7       	ldi	r20, 0x7A	; 122
 498:	55 e4       	ldi	r21, 0x45	; 69
 49a:	6d 85       	ldd	r22, Y+13	; 0x0d
 49c:	7e 85       	ldd	r23, Y+14	; 0x0e
 49e:	8f 85       	ldd	r24, Y+15	; 0x0f
 4a0:	98 89       	ldd	r25, Y+16	; 0x10
 4a2:	0e 94 81 04 	call	0x902	; 0x902 <__mulsf3>
 4a6:	dc 01       	movw	r26, r24
 4a8:	cb 01       	movw	r24, r22
 4aa:	89 8b       	std	Y+17, r24	; 0x11
 4ac:	9a 8b       	std	Y+18, r25	; 0x12
 4ae:	ab 8b       	std	Y+19, r26	; 0x13
 4b0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
 4b2:	20 e0       	ldi	r18, 0x00	; 0
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	40 e8       	ldi	r20, 0x80	; 128
 4b8:	5f e3       	ldi	r21, 0x3F	; 63
 4ba:	69 89       	ldd	r22, Y+17	; 0x11
 4bc:	7a 89       	ldd	r23, Y+18	; 0x12
 4be:	8b 89       	ldd	r24, Y+19	; 0x13
 4c0:	9c 89       	ldd	r25, Y+20	; 0x14
 4c2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__cmpsf2>
 4c6:	88 23       	and	r24, r24
 4c8:	2c f4       	brge	.+10     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
		__ticks = 1;
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	9e 8b       	std	Y+22, r25	; 0x16
 4d0:	8d 8b       	std	Y+21, r24	; 0x15
 4d2:	3f c0       	rjmp	.+126    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
	else if (__tmp > 65535)
 4d4:	20 e0       	ldi	r18, 0x00	; 0
 4d6:	3f ef       	ldi	r19, 0xFF	; 255
 4d8:	4f e7       	ldi	r20, 0x7F	; 127
 4da:	57 e4       	ldi	r21, 0x47	; 71
 4dc:	69 89       	ldd	r22, Y+17	; 0x11
 4de:	7a 89       	ldd	r23, Y+18	; 0x12
 4e0:	8b 89       	ldd	r24, Y+19	; 0x13
 4e2:	9c 89       	ldd	r25, Y+20	; 0x14
 4e4:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__gesf2>
 4e8:	18 16       	cp	r1, r24
 4ea:	4c f5       	brge	.+82     	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	40 e2       	ldi	r20, 0x20	; 32
 4f2:	51 e4       	ldi	r21, 0x41	; 65
 4f4:	6d 85       	ldd	r22, Y+13	; 0x0d
 4f6:	7e 85       	ldd	r23, Y+14	; 0x0e
 4f8:	8f 85       	ldd	r24, Y+15	; 0x0f
 4fa:	98 89       	ldd	r25, Y+16	; 0x10
 4fc:	0e 94 81 04 	call	0x902	; 0x902 <__mulsf3>
 500:	dc 01       	movw	r26, r24
 502:	cb 01       	movw	r24, r22
 504:	bc 01       	movw	r22, r24
 506:	cd 01       	movw	r24, r26
 508:	0e 94 00 04 	call	0x800	; 0x800 <__fixunssfsi>
 50c:	dc 01       	movw	r26, r24
 50e:	cb 01       	movw	r24, r22
 510:	9e 8b       	std	Y+22, r25	; 0x16
 512:	8d 8b       	std	Y+21, r24	; 0x15
 514:	0f c0       	rjmp	.+30     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 516:	80 e9       	ldi	r24, 0x90	; 144
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	98 8f       	std	Y+24, r25	; 0x18
 51c:	8f 8b       	std	Y+23, r24	; 0x17
 51e:	8f 89       	ldd	r24, Y+23	; 0x17
 520:	98 8d       	ldd	r25, Y+24	; 0x18
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 526:	98 8f       	std	Y+24, r25	; 0x18
 528:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 52a:	8d 89       	ldd	r24, Y+21	; 0x15
 52c:	9e 89       	ldd	r25, Y+22	; 0x16
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	9e 8b       	std	Y+22, r25	; 0x16
 532:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 534:	8d 89       	ldd	r24, Y+21	; 0x15
 536:	9e 89       	ldd	r25, Y+22	; 0x16
 538:	89 2b       	or	r24, r25
 53a:	69 f7       	brne	.-38     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
	_delay_ms(2);
}
 53c:	14 c0       	rjmp	.+40     	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 53e:	69 89       	ldd	r22, Y+17	; 0x11
 540:	7a 89       	ldd	r23, Y+18	; 0x12
 542:	8b 89       	ldd	r24, Y+19	; 0x13
 544:	9c 89       	ldd	r25, Y+20	; 0x14
 546:	0e 94 00 04 	call	0x800	; 0x800 <__fixunssfsi>
 54a:	dc 01       	movw	r26, r24
 54c:	cb 01       	movw	r24, r22
 54e:	9e 8b       	std	Y+22, r25	; 0x16
 550:	8d 8b       	std	Y+21, r24	; 0x15
 552:	8d 89       	ldd	r24, Y+21	; 0x15
 554:	9e 89       	ldd	r25, Y+22	; 0x16
 556:	9a 8f       	std	Y+26, r25	; 0x1a
 558:	89 8f       	std	Y+25, r24	; 0x19
 55a:	89 8d       	ldd	r24, Y+25	; 0x19
 55c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	f1 f7       	brne	.-4      	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
 562:	9a 8f       	std	Y+26, r25	; 0x1a
 564:	89 8f       	std	Y+25, r24	; 0x19
 566:	00 00       	nop
 568:	ec 96       	adiw	r28, 0x3c	; 60
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	f8 94       	cli
 56e:	de bf       	out	0x3e, r29	; 62
 570:	0f be       	out	0x3f, r0	; 63
 572:	cd bf       	out	0x3d, r28	; 61
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	08 95       	ret

0000057a <setupButtons>:
	void* arg;
} button_handler_t;

static volatile button_handler_t button_handlers[4] = {0};

void setupButtons(void) {
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
	DDRC &= ~(0x0F);  // PC0–PC3 como entrada
 582:	87 e2       	ldi	r24, 0x27	; 39
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	27 e2       	ldi	r18, 0x27	; 39
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	f9 01       	movw	r30, r18
 58c:	20 81       	ld	r18, Z
 58e:	20 7f       	andi	r18, 0xF0	; 240
 590:	fc 01       	movw	r30, r24
 592:	20 83       	st	Z, r18
	PORTC |= 0x0F;    // Pull-up interno habilitado
 594:	88 e2       	ldi	r24, 0x28	; 40
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	28 e2       	ldi	r18, 0x28	; 40
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	f9 01       	movw	r30, r18
 59e:	20 81       	ld	r18, Z
 5a0:	2f 60       	ori	r18, 0x0F	; 15
 5a2:	fc 01       	movw	r30, r24
 5a4:	20 83       	st	Z, r18

	PCICR |= (1 << PCIE1);  // Habilita interrupção no grupo PCINT[14:8]
 5a6:	88 e6       	ldi	r24, 0x68	; 104
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	28 e6       	ldi	r18, 0x68	; 104
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	f9 01       	movw	r30, r18
 5b0:	20 81       	ld	r18, Z
 5b2:	22 60       	ori	r18, 0x02	; 2
 5b4:	fc 01       	movw	r30, r24
 5b6:	20 83       	st	Z, r18
	PCMSK1 |= 0x0F;         // Habilita interrupção nos pinos PC0–PC3
 5b8:	8c e6       	ldi	r24, 0x6C	; 108
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	2c e6       	ldi	r18, 0x6C	; 108
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	f9 01       	movw	r30, r18
 5c2:	20 81       	ld	r18, Z
 5c4:	2f 60       	ori	r18, 0x0F	; 15
 5c6:	fc 01       	movw	r30, r24
 5c8:	20 83       	st	Z, r18

	sei();  // Habilita interrupções globais
 5ca:	78 94       	sei
}
 5cc:	00 00       	nop
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	08 95       	ret

000005d4 <register_button_callback>:

void register_button_callback(ButtonPin button, button_callback_t callback, void* arg) {
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	00 d0       	rcall	.+0      	; 0x5da <register_button_callback+0x6>
 5da:	00 d0       	rcall	.+0      	; 0x5dc <register_button_callback+0x8>
 5dc:	1f 92       	push	r1
 5de:	cd b7       	in	r28, 0x3d	; 61
 5e0:	de b7       	in	r29, 0x3e	; 62
 5e2:	89 83       	std	Y+1, r24	; 0x01
 5e4:	7b 83       	std	Y+3, r23	; 0x03
 5e6:	6a 83       	std	Y+2, r22	; 0x02
 5e8:	5d 83       	std	Y+5, r21	; 0x05
 5ea:	4c 83       	std	Y+4, r20	; 0x04
	if (button >= BUTTON_A && button <= BUTTON_D) {
 5ec:	89 81       	ldd	r24, Y+1	; 0x01
 5ee:	84 30       	cpi	r24, 0x04	; 4
 5f0:	e0 f4       	brcc	.+56     	; 0x62a <register_button_callback+0x56>
		button_handlers[button].callback = callback;
 5f2:	89 81       	ldd	r24, Y+1	; 0x01
 5f4:	88 2f       	mov	r24, r24
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	80 5f       	subi	r24, 0xF0	; 240
 602:	9e 4f       	sbci	r25, 0xFE	; 254
 604:	2a 81       	ldd	r18, Y+2	; 0x02
 606:	3b 81       	ldd	r19, Y+3	; 0x03
 608:	fc 01       	movw	r30, r24
 60a:	31 83       	std	Z+1, r19	; 0x01
 60c:	20 83       	st	Z, r18
		button_handlers[button].arg = arg;
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	88 2f       	mov	r24, r24
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	8e 5e       	subi	r24, 0xEE	; 238
 61e:	9e 4f       	sbci	r25, 0xFE	; 254
 620:	2c 81       	ldd	r18, Y+4	; 0x04
 622:	3d 81       	ldd	r19, Y+5	; 0x05
 624:	fc 01       	movw	r30, r24
 626:	31 83       	std	Z+1, r19	; 0x01
 628:	20 83       	st	Z, r18
	}
}
 62a:	00 00       	nop
 62c:	0f 90       	pop	r0
 62e:	0f 90       	pop	r0
 630:	0f 90       	pop	r0
 632:	0f 90       	pop	r0
 634:	0f 90       	pop	r0
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	08 95       	ret

0000063c <__vector_4>:

ISR(PCINT1_vect) {
 63c:	1f 92       	push	r1
 63e:	0f 92       	push	r0
 640:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 644:	0f 92       	push	r0
 646:	11 24       	eor	r1, r1
 648:	2f 93       	push	r18
 64a:	3f 93       	push	r19
 64c:	4f 93       	push	r20
 64e:	5f 93       	push	r21
 650:	6f 93       	push	r22
 652:	7f 93       	push	r23
 654:	8f 93       	push	r24
 656:	9f 93       	push	r25
 658:	af 93       	push	r26
 65a:	bf 93       	push	r27
 65c:	ef 93       	push	r30
 65e:	ff 93       	push	r31
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	1f 92       	push	r1
 666:	cd b7       	in	r28, 0x3d	; 61
 668:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t pin = 0; pin < 4; pin++) {
 66a:	19 82       	std	Y+1, r1	; 0x01
 66c:	3d c0       	rjmp	.+122    	; 0x6e8 <__vector_4+0xac>
		if (!(PINC & (1 << pin)) && button_handlers[pin].callback) {
 66e:	86 e2       	ldi	r24, 0x26	; 38
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	fc 01       	movw	r30, r24
 674:	80 81       	ld	r24, Z
 676:	88 2f       	mov	r24, r24
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	29 81       	ldd	r18, Y+1	; 0x01
 67c:	22 2f       	mov	r18, r18
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	02 c0       	rjmp	.+4      	; 0x686 <__vector_4+0x4a>
 682:	95 95       	asr	r25
 684:	87 95       	ror	r24
 686:	2a 95       	dec	r18
 688:	e2 f7       	brpl	.-8      	; 0x682 <__vector_4+0x46>
 68a:	81 70       	andi	r24, 0x01	; 1
 68c:	99 27       	eor	r25, r25
 68e:	89 2b       	or	r24, r25
 690:	41 f5       	brne	.+80     	; 0x6e2 <__vector_4+0xa6>
 692:	89 81       	ldd	r24, Y+1	; 0x01
 694:	88 2f       	mov	r24, r24
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	88 0f       	add	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	80 5f       	subi	r24, 0xF0	; 240
 6a2:	9e 4f       	sbci	r25, 0xFE	; 254
 6a4:	fc 01       	movw	r30, r24
 6a6:	80 81       	ld	r24, Z
 6a8:	91 81       	ldd	r25, Z+1	; 0x01
 6aa:	89 2b       	or	r24, r25
 6ac:	d1 f0       	breq	.+52     	; 0x6e2 <__vector_4+0xa6>
			button_handlers[pin].callback(button_handlers[pin].arg);
 6ae:	89 81       	ldd	r24, Y+1	; 0x01
 6b0:	88 2f       	mov	r24, r24
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	88 0f       	add	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	80 5f       	subi	r24, 0xF0	; 240
 6be:	9e 4f       	sbci	r25, 0xFE	; 254
 6c0:	fc 01       	movw	r30, r24
 6c2:	20 81       	ld	r18, Z
 6c4:	31 81       	ldd	r19, Z+1	; 0x01
 6c6:	89 81       	ldd	r24, Y+1	; 0x01
 6c8:	88 2f       	mov	r24, r24
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	88 0f       	add	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	8e 5e       	subi	r24, 0xEE	; 238
 6d6:	9e 4f       	sbci	r25, 0xFE	; 254
 6d8:	fc 01       	movw	r30, r24
 6da:	80 81       	ld	r24, Z
 6dc:	91 81       	ldd	r25, Z+1	; 0x01
 6de:	f9 01       	movw	r30, r18
 6e0:	09 95       	icall
		button_handlers[button].arg = arg;
	}
}

ISR(PCINT1_vect) {
	for (uint8_t pin = 0; pin < 4; pin++) {
 6e2:	89 81       	ldd	r24, Y+1	; 0x01
 6e4:	8f 5f       	subi	r24, 0xFF	; 255
 6e6:	89 83       	std	Y+1, r24	; 0x01
 6e8:	89 81       	ldd	r24, Y+1	; 0x01
 6ea:	84 30       	cpi	r24, 0x04	; 4
 6ec:	08 f4       	brcc	.+2      	; 0x6f0 <__vector_4+0xb4>
 6ee:	bf cf       	rjmp	.-130    	; 0x66e <__vector_4+0x32>
		if (!(PINC & (1 << pin)) && button_handlers[pin].callback) {
			button_handlers[pin].callback(button_handlers[pin].arg);
		}
	}
}
 6f0:	00 00       	nop
 6f2:	0f 90       	pop	r0
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	ff 91       	pop	r31
 6fa:	ef 91       	pop	r30
 6fc:	bf 91       	pop	r27
 6fe:	af 91       	pop	r26
 700:	9f 91       	pop	r25
 702:	8f 91       	pop	r24
 704:	7f 91       	pop	r23
 706:	6f 91       	pop	r22
 708:	5f 91       	pop	r21
 70a:	4f 91       	pop	r20
 70c:	3f 91       	pop	r19
 70e:	2f 91       	pop	r18
 710:	0f 90       	pop	r0
 712:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 716:	0f 90       	pop	r0
 718:	1f 90       	pop	r1
 71a:	18 95       	reti

0000071c <addNum>:

/* -------------------------- Application -------------------------- */

void addNum(void* arg) {
 71c:	cf 93       	push	r28
 71e:	df 93       	push	r29
 720:	00 d0       	rcall	.+0      	; 0x722 <addNum+0x6>
 722:	00 d0       	rcall	.+0      	; 0x724 <addNum+0x8>
 724:	cd b7       	in	r28, 0x3d	; 61
 726:	de b7       	in	r29, 0x3e	; 62
 728:	9c 83       	std	Y+4, r25	; 0x04
 72a:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t* num = (uint8_t*)arg;
 72c:	8b 81       	ldd	r24, Y+3	; 0x03
 72e:	9c 81       	ldd	r25, Y+4	; 0x04
 730:	9a 83       	std	Y+2, r25	; 0x02
 732:	89 83       	std	Y+1, r24	; 0x01
	(*num)++;
 734:	89 81       	ldd	r24, Y+1	; 0x01
 736:	9a 81       	ldd	r25, Y+2	; 0x02
 738:	fc 01       	movw	r30, r24
 73a:	80 81       	ld	r24, Z
 73c:	21 e0       	ldi	r18, 0x01	; 1
 73e:	28 0f       	add	r18, r24
 740:	89 81       	ldd	r24, Y+1	; 0x01
 742:	9a 81       	ldd	r25, Y+2	; 0x02
 744:	fc 01       	movw	r30, r24
 746:	20 83       	st	Z, r18
	(*num) %= 10;
 748:	89 81       	ldd	r24, Y+1	; 0x01
 74a:	9a 81       	ldd	r25, Y+2	; 0x02
 74c:	fc 01       	movw	r30, r24
 74e:	90 81       	ld	r25, Z
 750:	8d ec       	ldi	r24, 0xCD	; 205
 752:	98 9f       	mul	r25, r24
 754:	81 2d       	mov	r24, r1
 756:	11 24       	eor	r1, r1
 758:	28 2f       	mov	r18, r24
 75a:	26 95       	lsr	r18
 75c:	26 95       	lsr	r18
 75e:	26 95       	lsr	r18
 760:	82 2f       	mov	r24, r18
 762:	88 0f       	add	r24, r24
 764:	28 2f       	mov	r18, r24
 766:	22 0f       	add	r18, r18
 768:	22 0f       	add	r18, r18
 76a:	82 0f       	add	r24, r18
 76c:	29 2f       	mov	r18, r25
 76e:	28 1b       	sub	r18, r24
 770:	89 81       	ldd	r24, Y+1	; 0x01
 772:	9a 81       	ldd	r25, Y+2	; 0x02
 774:	fc 01       	movw	r30, r24
 776:	20 83       	st	Z, r18
}
 778:	00 00       	nop
 77a:	0f 90       	pop	r0
 77c:	0f 90       	pop	r0
 77e:	0f 90       	pop	r0
 780:	0f 90       	pop	r0
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	08 95       	ret

00000788 <main>:

int main(void) {
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	00 d0       	rcall	.+0      	; 0x78e <main+0x6>
 78e:	00 d0       	rcall	.+0      	; 0x790 <main+0x8>
 790:	cd b7       	in	r28, 0x3d	; 61
 792:	de b7       	in	r29, 0x3e	; 62
	uint8_t numU = 0, numD = 0, numC = 0, numM = 0;
 794:	19 82       	std	Y+1, r1	; 0x01
 796:	1a 82       	std	Y+2, r1	; 0x02
 798:	1b 82       	std	Y+3, r1	; 0x03
 79a:	1c 82       	std	Y+4, r1	; 0x04

	setupButtons();
 79c:	0e 94 bd 02 	call	0x57a	; 0x57a <setupButtons>
	setupSevenSegmentDisplay();
 7a0:	0e 94 53 00 	call	0xa6	; 0xa6 <setupSevenSegmentDisplay>

	register_button_callback(BUTTON_A, addNum, &numM);
 7a4:	ce 01       	movw	r24, r28
 7a6:	04 96       	adiw	r24, 0x04	; 4
 7a8:	ac 01       	movw	r20, r24
 7aa:	6e e8       	ldi	r22, 0x8E	; 142
 7ac:	73 e0       	ldi	r23, 0x03	; 3
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <register_button_callback>
	register_button_callback(BUTTON_B, addNum, &numC);
 7b4:	ce 01       	movw	r24, r28
 7b6:	03 96       	adiw	r24, 0x03	; 3
 7b8:	ac 01       	movw	r20, r24
 7ba:	6e e8       	ldi	r22, 0x8E	; 142
 7bc:	73 e0       	ldi	r23, 0x03	; 3
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <register_button_callback>
	register_button_callback(BUTTON_C, addNum, &numD);
 7c4:	ce 01       	movw	r24, r28
 7c6:	02 96       	adiw	r24, 0x02	; 2
 7c8:	ac 01       	movw	r20, r24
 7ca:	6e e8       	ldi	r22, 0x8E	; 142
 7cc:	73 e0       	ldi	r23, 0x03	; 3
 7ce:	82 e0       	ldi	r24, 0x02	; 2
 7d0:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <register_button_callback>
	register_button_callback(BUTTON_D, addNum, &numU);
 7d4:	ce 01       	movw	r24, r28
 7d6:	01 96       	adiw	r24, 0x01	; 1
 7d8:	ac 01       	movw	r20, r24
 7da:	6e e8       	ldi	r22, 0x8E	; 142
 7dc:	73 e0       	ldi	r23, 0x03	; 3
 7de:	83 e0       	ldi	r24, 0x03	; 3
 7e0:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <register_button_callback>

	while (1) {
		showAllSevenSegmentDisplay(numM, numC, numD, numU);
 7e4:	29 81       	ldd	r18, Y+1	; 0x01
 7e6:	3a 81       	ldd	r19, Y+2	; 0x02
 7e8:	9b 81       	ldd	r25, Y+3	; 0x03
 7ea:	8c 81       	ldd	r24, Y+4	; 0x04
 7ec:	43 2f       	mov	r20, r19
 7ee:	69 2f       	mov	r22, r25
 7f0:	0e 94 c5 00 	call	0x18a	; 0x18a <showAllSevenSegmentDisplay>
	}
 7f4:	f7 cf       	rjmp	.-18     	; 0x7e4 <main+0x5c>

000007f6 <__cmpsf2>:
 7f6:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_cmp>
 7fa:	08 f4       	brcc	.+2      	; 0x7fe <__cmpsf2+0x8>
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	08 95       	ret

00000800 <__fixunssfsi>:
 800:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__fp_splitA>
 804:	88 f0       	brcs	.+34     	; 0x828 <__fixunssfsi+0x28>
 806:	9f 57       	subi	r25, 0x7F	; 127
 808:	98 f0       	brcs	.+38     	; 0x830 <__fixunssfsi+0x30>
 80a:	b9 2f       	mov	r27, r25
 80c:	99 27       	eor	r25, r25
 80e:	b7 51       	subi	r27, 0x17	; 23
 810:	b0 f0       	brcs	.+44     	; 0x83e <__fixunssfsi+0x3e>
 812:	e1 f0       	breq	.+56     	; 0x84c <__fixunssfsi+0x4c>
 814:	66 0f       	add	r22, r22
 816:	77 1f       	adc	r23, r23
 818:	88 1f       	adc	r24, r24
 81a:	99 1f       	adc	r25, r25
 81c:	1a f0       	brmi	.+6      	; 0x824 <__fixunssfsi+0x24>
 81e:	ba 95       	dec	r27
 820:	c9 f7       	brne	.-14     	; 0x814 <__fixunssfsi+0x14>
 822:	14 c0       	rjmp	.+40     	; 0x84c <__fixunssfsi+0x4c>
 824:	b1 30       	cpi	r27, 0x01	; 1
 826:	91 f0       	breq	.+36     	; 0x84c <__fixunssfsi+0x4c>
 828:	0e 94 75 04 	call	0x8ea	; 0x8ea <__fp_zero>
 82c:	b1 e0       	ldi	r27, 0x01	; 1
 82e:	08 95       	ret
 830:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__fp_zero>
 834:	67 2f       	mov	r22, r23
 836:	78 2f       	mov	r23, r24
 838:	88 27       	eor	r24, r24
 83a:	b8 5f       	subi	r27, 0xF8	; 248
 83c:	39 f0       	breq	.+14     	; 0x84c <__fixunssfsi+0x4c>
 83e:	b9 3f       	cpi	r27, 0xF9	; 249
 840:	cc f3       	brlt	.-14     	; 0x834 <__fixunssfsi+0x34>
 842:	86 95       	lsr	r24
 844:	77 95       	ror	r23
 846:	67 95       	ror	r22
 848:	b3 95       	inc	r27
 84a:	d9 f7       	brne	.-10     	; 0x842 <__fixunssfsi+0x42>
 84c:	3e f4       	brtc	.+14     	; 0x85c <__fixunssfsi+0x5c>
 84e:	90 95       	com	r25
 850:	80 95       	com	r24
 852:	70 95       	com	r23
 854:	61 95       	neg	r22
 856:	7f 4f       	sbci	r23, 0xFF	; 255
 858:	8f 4f       	sbci	r24, 0xFF	; 255
 85a:	9f 4f       	sbci	r25, 0xFF	; 255
 85c:	08 95       	ret

0000085e <__fp_cmp>:
 85e:	99 0f       	add	r25, r25
 860:	00 08       	sbc	r0, r0
 862:	55 0f       	add	r21, r21
 864:	aa 0b       	sbc	r26, r26
 866:	e0 e8       	ldi	r30, 0x80	; 128
 868:	fe ef       	ldi	r31, 0xFE	; 254
 86a:	16 16       	cp	r1, r22
 86c:	17 06       	cpc	r1, r23
 86e:	e8 07       	cpc	r30, r24
 870:	f9 07       	cpc	r31, r25
 872:	c0 f0       	brcs	.+48     	; 0x8a4 <__fp_cmp+0x46>
 874:	12 16       	cp	r1, r18
 876:	13 06       	cpc	r1, r19
 878:	e4 07       	cpc	r30, r20
 87a:	f5 07       	cpc	r31, r21
 87c:	98 f0       	brcs	.+38     	; 0x8a4 <__fp_cmp+0x46>
 87e:	62 1b       	sub	r22, r18
 880:	73 0b       	sbc	r23, r19
 882:	84 0b       	sbc	r24, r20
 884:	95 0b       	sbc	r25, r21
 886:	39 f4       	brne	.+14     	; 0x896 <__fp_cmp+0x38>
 888:	0a 26       	eor	r0, r26
 88a:	61 f0       	breq	.+24     	; 0x8a4 <__fp_cmp+0x46>
 88c:	23 2b       	or	r18, r19
 88e:	24 2b       	or	r18, r20
 890:	25 2b       	or	r18, r21
 892:	21 f4       	brne	.+8      	; 0x89c <__fp_cmp+0x3e>
 894:	08 95       	ret
 896:	0a 26       	eor	r0, r26
 898:	09 f4       	brne	.+2      	; 0x89c <__fp_cmp+0x3e>
 89a:	a1 40       	sbci	r26, 0x01	; 1
 89c:	a6 95       	lsr	r26
 89e:	8f ef       	ldi	r24, 0xFF	; 255
 8a0:	81 1d       	adc	r24, r1
 8a2:	81 1d       	adc	r24, r1
 8a4:	08 95       	ret

000008a6 <__fp_split3>:
 8a6:	57 fd       	sbrc	r21, 7
 8a8:	90 58       	subi	r25, 0x80	; 128
 8aa:	44 0f       	add	r20, r20
 8ac:	55 1f       	adc	r21, r21
 8ae:	59 f0       	breq	.+22     	; 0x8c6 <__fp_splitA+0x10>
 8b0:	5f 3f       	cpi	r21, 0xFF	; 255
 8b2:	71 f0       	breq	.+28     	; 0x8d0 <__fp_splitA+0x1a>
 8b4:	47 95       	ror	r20

000008b6 <__fp_splitA>:
 8b6:	88 0f       	add	r24, r24
 8b8:	97 fb       	bst	r25, 7
 8ba:	99 1f       	adc	r25, r25
 8bc:	61 f0       	breq	.+24     	; 0x8d6 <__fp_splitA+0x20>
 8be:	9f 3f       	cpi	r25, 0xFF	; 255
 8c0:	79 f0       	breq	.+30     	; 0x8e0 <__fp_splitA+0x2a>
 8c2:	87 95       	ror	r24
 8c4:	08 95       	ret
 8c6:	12 16       	cp	r1, r18
 8c8:	13 06       	cpc	r1, r19
 8ca:	14 06       	cpc	r1, r20
 8cc:	55 1f       	adc	r21, r21
 8ce:	f2 cf       	rjmp	.-28     	; 0x8b4 <__fp_split3+0xe>
 8d0:	46 95       	lsr	r20
 8d2:	f1 df       	rcall	.-30     	; 0x8b6 <__fp_splitA>
 8d4:	08 c0       	rjmp	.+16     	; 0x8e6 <__fp_splitA+0x30>
 8d6:	16 16       	cp	r1, r22
 8d8:	17 06       	cpc	r1, r23
 8da:	18 06       	cpc	r1, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	f1 cf       	rjmp	.-30     	; 0x8c2 <__fp_splitA+0xc>
 8e0:	86 95       	lsr	r24
 8e2:	71 05       	cpc	r23, r1
 8e4:	61 05       	cpc	r22, r1
 8e6:	08 94       	sec
 8e8:	08 95       	ret

000008ea <__fp_zero>:
 8ea:	e8 94       	clt

000008ec <__fp_szero>:
 8ec:	bb 27       	eor	r27, r27
 8ee:	66 27       	eor	r22, r22
 8f0:	77 27       	eor	r23, r23
 8f2:	cb 01       	movw	r24, r22
 8f4:	97 f9       	bld	r25, 7
 8f6:	08 95       	ret

000008f8 <__gesf2>:
 8f8:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_cmp>
 8fc:	08 f4       	brcc	.+2      	; 0x900 <__stack+0x1>
 8fe:	8f ef       	ldi	r24, 0xFF	; 255
 900:	08 95       	ret

00000902 <__mulsf3>:
 902:	0e 94 94 04 	call	0x928	; 0x928 <__mulsf3x>
 906:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_round>
 90a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__fp_pscA>
 90e:	38 f0       	brcs	.+14     	; 0x91e <__mulsf3+0x1c>
 910:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__fp_pscB>
 914:	20 f0       	brcs	.+8      	; 0x91e <__mulsf3+0x1c>
 916:	95 23       	and	r25, r21
 918:	11 f0       	breq	.+4      	; 0x91e <__mulsf3+0x1c>
 91a:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_inf>
 91e:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__fp_nan>
 922:	11 24       	eor	r1, r1
 924:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_szero>

00000928 <__mulsf3x>:
 928:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_split3>
 92c:	70 f3       	brcs	.-36     	; 0x90a <__mulsf3+0x8>

0000092e <__mulsf3_pse>:
 92e:	95 9f       	mul	r25, r21
 930:	c1 f3       	breq	.-16     	; 0x922 <__mulsf3+0x20>
 932:	95 0f       	add	r25, r21
 934:	50 e0       	ldi	r21, 0x00	; 0
 936:	55 1f       	adc	r21, r21
 938:	62 9f       	mul	r22, r18
 93a:	f0 01       	movw	r30, r0
 93c:	72 9f       	mul	r23, r18
 93e:	bb 27       	eor	r27, r27
 940:	f0 0d       	add	r31, r0
 942:	b1 1d       	adc	r27, r1
 944:	63 9f       	mul	r22, r19
 946:	aa 27       	eor	r26, r26
 948:	f0 0d       	add	r31, r0
 94a:	b1 1d       	adc	r27, r1
 94c:	aa 1f       	adc	r26, r26
 94e:	64 9f       	mul	r22, r20
 950:	66 27       	eor	r22, r22
 952:	b0 0d       	add	r27, r0
 954:	a1 1d       	adc	r26, r1
 956:	66 1f       	adc	r22, r22
 958:	82 9f       	mul	r24, r18
 95a:	22 27       	eor	r18, r18
 95c:	b0 0d       	add	r27, r0
 95e:	a1 1d       	adc	r26, r1
 960:	62 1f       	adc	r22, r18
 962:	73 9f       	mul	r23, r19
 964:	b0 0d       	add	r27, r0
 966:	a1 1d       	adc	r26, r1
 968:	62 1f       	adc	r22, r18
 96a:	83 9f       	mul	r24, r19
 96c:	a0 0d       	add	r26, r0
 96e:	61 1d       	adc	r22, r1
 970:	22 1f       	adc	r18, r18
 972:	74 9f       	mul	r23, r20
 974:	33 27       	eor	r19, r19
 976:	a0 0d       	add	r26, r0
 978:	61 1d       	adc	r22, r1
 97a:	23 1f       	adc	r18, r19
 97c:	84 9f       	mul	r24, r20
 97e:	60 0d       	add	r22, r0
 980:	21 1d       	adc	r18, r1
 982:	82 2f       	mov	r24, r18
 984:	76 2f       	mov	r23, r22
 986:	6a 2f       	mov	r22, r26
 988:	11 24       	eor	r1, r1
 98a:	9f 57       	subi	r25, 0x7F	; 127
 98c:	50 40       	sbci	r21, 0x00	; 0
 98e:	9a f0       	brmi	.+38     	; 0x9b6 <__mulsf3_pse+0x88>
 990:	f1 f0       	breq	.+60     	; 0x9ce <__mulsf3_pse+0xa0>
 992:	88 23       	and	r24, r24
 994:	4a f0       	brmi	.+18     	; 0x9a8 <__mulsf3_pse+0x7a>
 996:	ee 0f       	add	r30, r30
 998:	ff 1f       	adc	r31, r31
 99a:	bb 1f       	adc	r27, r27
 99c:	66 1f       	adc	r22, r22
 99e:	77 1f       	adc	r23, r23
 9a0:	88 1f       	adc	r24, r24
 9a2:	91 50       	subi	r25, 0x01	; 1
 9a4:	50 40       	sbci	r21, 0x00	; 0
 9a6:	a9 f7       	brne	.-22     	; 0x992 <__mulsf3_pse+0x64>
 9a8:	9e 3f       	cpi	r25, 0xFE	; 254
 9aa:	51 05       	cpc	r21, r1
 9ac:	80 f0       	brcs	.+32     	; 0x9ce <__mulsf3_pse+0xa0>
 9ae:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_inf>
 9b2:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_szero>
 9b6:	5f 3f       	cpi	r21, 0xFF	; 255
 9b8:	e4 f3       	brlt	.-8      	; 0x9b2 <__mulsf3_pse+0x84>
 9ba:	98 3e       	cpi	r25, 0xE8	; 232
 9bc:	d4 f3       	brlt	.-12     	; 0x9b2 <__mulsf3_pse+0x84>
 9be:	86 95       	lsr	r24
 9c0:	77 95       	ror	r23
 9c2:	67 95       	ror	r22
 9c4:	b7 95       	ror	r27
 9c6:	f7 95       	ror	r31
 9c8:	e7 95       	ror	r30
 9ca:	9f 5f       	subi	r25, 0xFF	; 255
 9cc:	c1 f7       	brne	.-16     	; 0x9be <__mulsf3_pse+0x90>
 9ce:	fe 2b       	or	r31, r30
 9d0:	88 0f       	add	r24, r24
 9d2:	91 1d       	adc	r25, r1
 9d4:	96 95       	lsr	r25
 9d6:	87 95       	ror	r24
 9d8:	97 f9       	bld	r25, 7
 9da:	08 95       	ret

000009dc <__fp_inf>:
 9dc:	97 f9       	bld	r25, 7
 9de:	9f 67       	ori	r25, 0x7F	; 127
 9e0:	80 e8       	ldi	r24, 0x80	; 128
 9e2:	70 e0       	ldi	r23, 0x00	; 0
 9e4:	60 e0       	ldi	r22, 0x00	; 0
 9e6:	08 95       	ret

000009e8 <__fp_nan>:
 9e8:	9f ef       	ldi	r25, 0xFF	; 255
 9ea:	80 ec       	ldi	r24, 0xC0	; 192
 9ec:	08 95       	ret

000009ee <__fp_pscA>:
 9ee:	00 24       	eor	r0, r0
 9f0:	0a 94       	dec	r0
 9f2:	16 16       	cp	r1, r22
 9f4:	17 06       	cpc	r1, r23
 9f6:	18 06       	cpc	r1, r24
 9f8:	09 06       	cpc	r0, r25
 9fa:	08 95       	ret

000009fc <__fp_pscB>:
 9fc:	00 24       	eor	r0, r0
 9fe:	0a 94       	dec	r0
 a00:	12 16       	cp	r1, r18
 a02:	13 06       	cpc	r1, r19
 a04:	14 06       	cpc	r1, r20
 a06:	05 06       	cpc	r0, r21
 a08:	08 95       	ret

00000a0a <__fp_round>:
 a0a:	09 2e       	mov	r0, r25
 a0c:	03 94       	inc	r0
 a0e:	00 0c       	add	r0, r0
 a10:	11 f4       	brne	.+4      	; 0xa16 <__fp_round+0xc>
 a12:	88 23       	and	r24, r24
 a14:	52 f0       	brmi	.+20     	; 0xa2a <__fp_round+0x20>
 a16:	bb 0f       	add	r27, r27
 a18:	40 f4       	brcc	.+16     	; 0xa2a <__fp_round+0x20>
 a1a:	bf 2b       	or	r27, r31
 a1c:	11 f4       	brne	.+4      	; 0xa22 <__fp_round+0x18>
 a1e:	60 ff       	sbrs	r22, 0
 a20:	04 c0       	rjmp	.+8      	; 0xa2a <__fp_round+0x20>
 a22:	6f 5f       	subi	r22, 0xFF	; 255
 a24:	7f 4f       	sbci	r23, 0xFF	; 255
 a26:	8f 4f       	sbci	r24, 0xFF	; 255
 a28:	9f 4f       	sbci	r25, 0xFF	; 255
 a2a:	08 95       	ret

00000a2c <_exit>:
 a2c:	f8 94       	cli

00000a2e <__stop_program>:
 a2e:	ff cf       	rjmp	.-2      	; 0xa2e <__stop_program>
