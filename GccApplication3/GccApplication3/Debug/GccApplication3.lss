
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000bec  00000c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800110  00800110  00000c90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b7f  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b2  00000000  00000000  000018f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071f  00000000  00000000  000020a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  000027c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000746f  00000000  00000000  000029a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e2  00000000  00000000  00009e13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000a1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002abf  00000000  00000000  0000a25d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 36 02 	call	0x46c	; 0x46c <main>
  9e:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup7S>:
		0x33, 0x5B, 0x5F, 0x70,
		0x7F, 0x7B, 0x77, 0x1F,
		0x4E, 0x3D, 0x4F, 0x47
};

void setup7S(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	DDRD |= 0x7F;  // segmentos PD0–PD6
  ae:	8a e2       	ldi	r24, 0x2A	; 42
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	2a e2       	ldi	r18, 0x2A	; 42
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	20 81       	ld	r18, Z
  ba:	2f 67       	ori	r18, 0x7F	; 127
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
	DDRB |= 0x0F;  // dígitos PB0–PB3
  c0:	84 e2       	ldi	r24, 0x24	; 36
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	24 e2       	ldi	r18, 0x24	; 36
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	20 81       	ld	r18, Z
  cc:	2f 60       	ori	r18, 0x0F	; 15
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
}
  d2:	00 00       	nop
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <showDigit>:
static inline void showDigit(uint8_t v, uint8_t d){
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <showDigit+0x6>
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	89 83       	std	Y+1, r24	; 0x01
  e6:	6a 83       	std	Y+2, r22	; 0x02
	PORTD = (PORTD & 0x80) | sevenSeg[v];
  e8:	8b e2       	ldi	r24, 0x2B	; 43
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	2b e2       	ldi	r18, 0x2B	; 43
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	f9 01       	movw	r30, r18
  f2:	20 81       	ld	r18, Z
  f4:	42 2f       	mov	r20, r18
  f6:	40 78       	andi	r20, 0x80	; 128
  f8:	29 81       	ldd	r18, Y+1	; 0x01
  fa:	22 2f       	mov	r18, r18
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	20 50       	subi	r18, 0x00	; 0
 100:	3f 4f       	sbci	r19, 0xFF	; 255
 102:	f9 01       	movw	r30, r18
 104:	20 81       	ld	r18, Z
 106:	24 2b       	or	r18, r20
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	PORTB = (PORTB & 0xF0) | (1<<d);
 10c:	85 e2       	ldi	r24, 0x25	; 37
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	25 e2       	ldi	r18, 0x25	; 37
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	f9 01       	movw	r30, r18
 116:	20 81       	ld	r18, Z
 118:	62 2f       	mov	r22, r18
 11a:	60 7f       	andi	r22, 0xF0	; 240
 11c:	2a 81       	ldd	r18, Y+2	; 0x02
 11e:	42 2f       	mov	r20, r18
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <showDigit+0x52>
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	4a 95       	dec	r20
 12e:	e2 f7       	brpl	.-8      	; 0x128 <showDigit+0x4e>
 130:	26 2b       	or	r18, r22
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
}
 136:	00 00       	nop
 138:	0f 90       	pop	r0
 13a:	0f 90       	pop	r0
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <__vector_4>:
/* ===== Botões PCINT ===== */
typedef enum { A=0,B,C,D } Btn;
typedef void (*cb)(void*);
struct { cb f; void* a; } h[4];

ISR(PCINT1_vect){
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	1f 92       	push	r1
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t i=0;i<4;i++){
 170:	19 82       	std	Y+1, r1	; 0x01
 172:	3d c0       	rjmp	.+122    	; 0x1ee <__vector_4+0xac>
		if(!(PINC&(1<<i)) && h[i].f) h[i].f(h[i].a);
 174:	86 e2       	ldi	r24, 0x26	; 38
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	80 81       	ld	r24, Z
 17c:	88 2f       	mov	r24, r24
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	29 81       	ldd	r18, Y+1	; 0x01
 182:	22 2f       	mov	r18, r18
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <__vector_4+0x4a>
 188:	95 95       	asr	r25
 18a:	87 95       	ror	r24
 18c:	2a 95       	dec	r18
 18e:	e2 f7       	brpl	.-8      	; 0x188 <__vector_4+0x46>
 190:	81 70       	andi	r24, 0x01	; 1
 192:	99 27       	eor	r25, r25
 194:	89 2b       	or	r24, r25
 196:	41 f5       	brne	.+80     	; 0x1e8 <__vector_4+0xa6>
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	88 2f       	mov	r24, r24
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	80 5f       	subi	r24, 0xF0	; 240
 1a8:	9e 4f       	sbci	r25, 0xFE	; 254
 1aa:	fc 01       	movw	r30, r24
 1ac:	80 81       	ld	r24, Z
 1ae:	91 81       	ldd	r25, Z+1	; 0x01
 1b0:	89 2b       	or	r24, r25
 1b2:	d1 f0       	breq	.+52     	; 0x1e8 <__vector_4+0xa6>
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	88 2f       	mov	r24, r24
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	80 5f       	subi	r24, 0xF0	; 240
 1c4:	9e 4f       	sbci	r25, 0xFE	; 254
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 81       	ld	r18, Z
 1ca:	31 81       	ldd	r19, Z+1	; 0x01
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	88 2f       	mov	r24, r24
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	8e 5e       	subi	r24, 0xEE	; 238
 1dc:	9e 4f       	sbci	r25, 0xFE	; 254
 1de:	fc 01       	movw	r30, r24
 1e0:	80 81       	ld	r24, Z
 1e2:	91 81       	ldd	r25, Z+1	; 0x01
 1e4:	f9 01       	movw	r30, r18
 1e6:	09 95       	icall
typedef enum { A=0,B,C,D } Btn;
typedef void (*cb)(void*);
struct { cb f; void* a; } h[4];

ISR(PCINT1_vect){
	for(uint8_t i=0;i<4;i++){
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	8f 5f       	subi	r24, 0xFF	; 255
 1ec:	89 83       	std	Y+1, r24	; 0x01
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	84 30       	cpi	r24, 0x04	; 4
 1f2:	08 f4       	brcc	.+2      	; 0x1f6 <__vector_4+0xb4>
 1f4:	bf cf       	rjmp	.-130    	; 0x174 <__vector_4+0x32>
		if(!(PINC&(1<<i)) && h[i].f) h[i].f(h[i].a);
	}
}
 1f6:	00 00       	nop
 1f8:	0f 90       	pop	r0
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	7f 91       	pop	r23
 20c:	6f 91       	pop	r22
 20e:	5f 91       	pop	r21
 210:	4f 91       	pop	r20
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <setupBtns>:
void setupBtns(void){
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
	DDRC &= ~0x0F; PORTC |= 0x0F;
 22a:	87 e2       	ldi	r24, 0x27	; 39
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	27 e2       	ldi	r18, 0x27	; 39
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	f9 01       	movw	r30, r18
 234:	20 81       	ld	r18, Z
 236:	20 7f       	andi	r18, 0xF0	; 240
 238:	fc 01       	movw	r30, r24
 23a:	20 83       	st	Z, r18
 23c:	88 e2       	ldi	r24, 0x28	; 40
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	28 e2       	ldi	r18, 0x28	; 40
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	f9 01       	movw	r30, r18
 246:	20 81       	ld	r18, Z
 248:	2f 60       	ori	r18, 0x0F	; 15
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
	PCICR |= (1<<PCIE1); PCMSK1 |= 0x0F;
 24e:	88 e6       	ldi	r24, 0x68	; 104
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	28 e6       	ldi	r18, 0x68	; 104
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	f9 01       	movw	r30, r18
 258:	20 81       	ld	r18, Z
 25a:	22 60       	ori	r18, 0x02	; 2
 25c:	fc 01       	movw	r30, r24
 25e:	20 83       	st	Z, r18
 260:	8c e6       	ldi	r24, 0x6C	; 108
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	2c e6       	ldi	r18, 0x6C	; 108
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	f9 01       	movw	r30, r18
 26a:	20 81       	ld	r18, Z
 26c:	2f 60       	ori	r18, 0x0F	; 15
 26e:	fc 01       	movw	r30, r24
 270:	20 83       	st	Z, r18
}
 272:	00 00       	nop
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <onBtn>:
void onBtn(Btn b, cb f, void* a){ h[b].f=f; h[b].a=a; }
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	00 d0       	rcall	.+0      	; 0x280 <onBtn+0x6>
 280:	00 d0       	rcall	.+0      	; 0x282 <onBtn+0x8>
 282:	1f 92       	push	r1
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	89 83       	std	Y+1, r24	; 0x01
 28a:	7b 83       	std	Y+3, r23	; 0x03
 28c:	6a 83       	std	Y+2, r22	; 0x02
 28e:	5d 83       	std	Y+5, r21	; 0x05
 290:	4c 83       	std	Y+4, r20	; 0x04
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	88 2f       	mov	r24, r24
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	80 5f       	subi	r24, 0xF0	; 240
 2a2:	9e 4f       	sbci	r25, 0xFE	; 254
 2a4:	2a 81       	ldd	r18, Y+2	; 0x02
 2a6:	3b 81       	ldd	r19, Y+3	; 0x03
 2a8:	fc 01       	movw	r30, r24
 2aa:	31 83       	std	Z+1, r19	; 0x01
 2ac:	20 83       	st	Z, r18
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	88 2f       	mov	r24, r24
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	8e 5e       	subi	r24, 0xEE	; 238
 2be:	9e 4f       	sbci	r25, 0xFE	; 254
 2c0:	2c 81       	ldd	r18, Y+4	; 0x04
 2c2:	3d 81       	ldd	r19, Y+5	; 0x05
 2c4:	fc 01       	movw	r30, r24
 2c6:	31 83       	std	Z+1, r19	; 0x01
 2c8:	20 83       	st	Z, r18
 2ca:	00 00       	nop
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <setupUART>:

/* ===== UART 9600 8N1 ===== */
#define BAUD 9600
#define UBRRVAL ((F_CPU/(16UL*BAUD))-1)
void setupUART(void){
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
	UBRR0H=UBRRVAL>>8; UBRR0L=UBRRVAL;
 2e4:	85 ec       	ldi	r24, 0xC5	; 197
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	fc 01       	movw	r30, r24
 2ea:	10 82       	st	Z, r1
 2ec:	84 ec       	ldi	r24, 0xC4	; 196
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	27 e6       	ldi	r18, 0x67	; 103
 2f2:	fc 01       	movw	r30, r24
 2f4:	20 83       	st	Z, r18
	UCSR0B=(1<<TXEN0);
 2f6:	81 ec       	ldi	r24, 0xC1	; 193
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	28 e0       	ldi	r18, 0x08	; 8
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
	UCSR0C=(1<<UCSZ01)|(1<<UCSZ00);
 300:	82 ec       	ldi	r24, 0xC2	; 194
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	26 e0       	ldi	r18, 0x06	; 6
 306:	fc 01       	movw	r30, r24
 308:	20 83       	st	Z, r18
}
 30a:	00 00       	nop
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <uart_putc>:
void uart_putc(char c){
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	1f 92       	push	r1
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A&(1<<UDRE0)));
 31e:	00 00       	nop
 320:	80 ec       	ldi	r24, 0xC0	; 192
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	fc 01       	movw	r30, r24
 326:	80 81       	ld	r24, Z
 328:	88 2f       	mov	r24, r24
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	80 72       	andi	r24, 0x20	; 32
 32e:	99 27       	eor	r25, r25
 330:	89 2b       	or	r24, r25
 332:	b1 f3       	breq	.-20     	; 0x320 <uart_putc+0xe>
	UDR0 = c;
 334:	86 ec       	ldi	r24, 0xC6	; 198
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	29 81       	ldd	r18, Y+1	; 0x01
 33a:	fc 01       	movw	r30, r24
 33c:	20 83       	st	Z, r18
}
 33e:	00 00       	nop
 340:	0f 90       	pop	r0
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <uart_puts>:
void uart_puts(const char* s){
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	00 d0       	rcall	.+0      	; 0x34e <uart_puts+0x6>
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
 352:	9a 83       	std	Y+2, r25	; 0x02
 354:	89 83       	std	Y+1, r24	; 0x01
	while(*s) uart_putc(*s++);
 356:	0b c0       	rjmp	.+22     	; 0x36e <uart_puts+0x26>
 358:	89 81       	ldd	r24, Y+1	; 0x01
 35a:	9a 81       	ldd	r25, Y+2	; 0x02
 35c:	9c 01       	movw	r18, r24
 35e:	2f 5f       	subi	r18, 0xFF	; 255
 360:	3f 4f       	sbci	r19, 0xFF	; 255
 362:	3a 83       	std	Y+2, r19	; 0x02
 364:	29 83       	std	Y+1, r18	; 0x01
 366:	fc 01       	movw	r30, r24
 368:	80 81       	ld	r24, Z
 36a:	0e 94 89 01 	call	0x312	; 0x312 <uart_putc>
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	9a 81       	ldd	r25, Y+2	; 0x02
 372:	fc 01       	movw	r30, r24
 374:	80 81       	ld	r24, Z
 376:	88 23       	and	r24, r24
 378:	79 f7       	brne	.-34     	; 0x358 <uart_puts+0x10>
	uart_putc('\n');
 37a:	8a e0       	ldi	r24, 0x0A	; 10
 37c:	0e 94 89 01 	call	0x312	; 0x312 <uart_putc>
}
 380:	00 00       	nop
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <adc_init>:

/* ===== ADC polling em ADC5 ===== */
void adc_init(void){
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
	ADMUX  = (1<<REFS0) | (5 & 0x0F);        // AVCC, canal 5
 394:	8c e7       	ldi	r24, 0x7C	; 124
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	25 e4       	ldi	r18, 0x45	; 69
 39a:	fc 01       	movw	r30, r24
 39c:	20 83       	st	Z, r18
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 39e:	8a e7       	ldi	r24, 0x7A	; 122
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	27 e8       	ldi	r18, 0x87	; 135
 3a4:	fc 01       	movw	r30, r24
 3a6:	20 83       	st	Z, r18
}
 3a8:	00 00       	nop
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <adc_read>:
uint16_t adc_read(void){
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	00 d0       	rcall	.+0      	; 0x3b6 <adc_read+0x6>
 3b6:	00 d0       	rcall	.+0      	; 0x3b8 <adc_read+0x8>
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1<<ADSC);
 3bc:	8a e7       	ldi	r24, 0x7A	; 122
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	2a e7       	ldi	r18, 0x7A	; 122
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	f9 01       	movw	r30, r18
 3c6:	20 81       	ld	r18, Z
 3c8:	20 64       	ori	r18, 0x40	; 64
 3ca:	fc 01       	movw	r30, r24
 3cc:	20 83       	st	Z, r18
	while(ADCSRA&(1<<ADSC));
 3ce:	00 00       	nop
 3d0:	8a e7       	ldi	r24, 0x7A	; 122
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	fc 01       	movw	r30, r24
 3d6:	80 81       	ld	r24, Z
 3d8:	88 2f       	mov	r24, r24
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	80 74       	andi	r24, 0x40	; 64
 3de:	99 27       	eor	r25, r25
 3e0:	89 2b       	or	r24, r25
 3e2:	b1 f7       	brne	.-20     	; 0x3d0 <adc_read+0x20>
	uint16_t l = ADCL, h = ADCH;
 3e4:	88 e7       	ldi	r24, 0x78	; 120
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	fc 01       	movw	r30, r24
 3ea:	80 81       	ld	r24, Z
 3ec:	88 2f       	mov	r24, r24
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	9a 83       	std	Y+2, r25	; 0x02
 3f2:	89 83       	std	Y+1, r24	; 0x01
 3f4:	89 e7       	ldi	r24, 0x79	; 121
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	fc 01       	movw	r30, r24
 3fa:	80 81       	ld	r24, Z
 3fc:	88 2f       	mov	r24, r24
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	9c 83       	std	Y+4, r25	; 0x04
 402:	8b 83       	std	Y+3, r24	; 0x03
	return (h<<8)|l;
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	9c 81       	ldd	r25, Y+4	; 0x04
 408:	38 2f       	mov	r19, r24
 40a:	22 27       	eor	r18, r18
 40c:	89 81       	ldd	r24, Y+1	; 0x01
 40e:	9a 81       	ldd	r25, Y+2	; 0x02
 410:	82 2b       	or	r24, r18
 412:	93 2b       	or	r25, r19
}
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <inc>:

/* ===== callbacks ===== */
void inc(void* p){
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	00 d0       	rcall	.+0      	; 0x428 <inc+0x6>
 428:	00 d0       	rcall	.+0      	; 0x42a <inc+0x8>
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
 42e:	9c 83       	std	Y+4, r25	; 0x04
 430:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t* x = p;
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	9c 81       	ldd	r25, Y+4	; 0x04
 436:	9a 83       	std	Y+2, r25	; 0x02
 438:	89 83       	std	Y+1, r24	; 0x01
	*x = (*x + 1) % 10;
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	9a 81       	ldd	r25, Y+2	; 0x02
 43e:	fc 01       	movw	r30, r24
 440:	80 81       	ld	r24, Z
 442:	88 2f       	mov	r24, r24
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	01 96       	adiw	r24, 0x01	; 1
 448:	2a e0       	ldi	r18, 0x0A	; 10
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	b9 01       	movw	r22, r18
 44e:	0e 94 8c 05 	call	0xb18	; 0xb18 <__divmodhi4>
 452:	28 2f       	mov	r18, r24
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	9a 81       	ldd	r25, Y+2	; 0x02
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
}
 45c:	00 00       	nop
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	0f 90       	pop	r0
 464:	0f 90       	pop	r0
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	08 95       	ret

0000046c <main>:

/* ===== main ===== */
int main(void){
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
 474:	c6 54       	subi	r28, 0x46	; 70
 476:	d1 09       	sbc	r29, r1
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
	uint8_t u=0,d=0,c=0,m=0;
 482:	1d ae       	std	Y+61, r1	; 0x3d
 484:	1e ae       	std	Y+62, r1	; 0x3e
 486:	1f ae       	std	Y+63, r1	; 0x3f
 488:	ce 01       	movw	r24, r28
 48a:	80 5c       	subi	r24, 0xC0	; 192
 48c:	9f 4f       	sbci	r25, 0xFF	; 255
 48e:	fc 01       	movw	r30, r24
 490:	10 82       	st	Z, r1

	setup7S();
 492:	0e 94 53 00 	call	0xa6	; 0xa6 <setup7S>
	setupBtns();
 496:	0e 94 11 01 	call	0x222	; 0x222 <setupBtns>
	setupUART();
 49a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <setupUART>
	adc_init();
 49e:	0e 94 c6 01 	call	0x38c	; 0x38c <adc_init>
	sei();
 4a2:	78 94       	sei

	onBtn(A, inc, &m);
 4a4:	ce 01       	movw	r24, r28
 4a6:	80 5c       	subi	r24, 0xC0	; 192
 4a8:	9f 4f       	sbci	r25, 0xFF	; 255
 4aa:	ac 01       	movw	r20, r24
 4ac:	61 e1       	ldi	r22, 0x11	; 17
 4ae:	72 e0       	ldi	r23, 0x02	; 2
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	0e 94 3d 01 	call	0x27a	; 0x27a <onBtn>
	onBtn(B, inc, &c);
 4b6:	ce 01       	movw	r24, r28
 4b8:	cf 96       	adiw	r24, 0x3f	; 63
 4ba:	ac 01       	movw	r20, r24
 4bc:	61 e1       	ldi	r22, 0x11	; 17
 4be:	72 e0       	ldi	r23, 0x02	; 2
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 3d 01 	call	0x27a	; 0x27a <onBtn>
	onBtn(C, inc, &d);
 4c6:	ce 01       	movw	r24, r28
 4c8:	ce 96       	adiw	r24, 0x3e	; 62
 4ca:	ac 01       	movw	r20, r24
 4cc:	61 e1       	ldi	r22, 0x11	; 17
 4ce:	72 e0       	ldi	r23, 0x02	; 2
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	0e 94 3d 01 	call	0x27a	; 0x27a <onBtn>
	onBtn(D, inc, &u);
 4d6:	ce 01       	movw	r24, r28
 4d8:	cd 96       	adiw	r24, 0x3d	; 61
 4da:	ac 01       	movw	r20, r24
 4dc:	61 e1       	ldi	r22, 0x11	; 17
 4de:	72 e0       	ldi	r23, 0x02	; 2
 4e0:	83 e0       	ldi	r24, 0x03	; 3
 4e2:	0e 94 3d 01 	call	0x27a	; 0x27a <onBtn>

	uint16_t timer = 0;
 4e6:	1a 82       	std	Y+2, r1	; 0x02
 4e8:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		// ————————————— multiplexa display sem parar —————————————
		showDigit(u,3); _delay_ms(2);
 4ea:	8d ad       	ldd	r24, Y+61	; 0x3d
 4ec:	63 e0       	ldi	r22, 0x03	; 3
 4ee:	0e 94 6d 00 	call	0xda	; 0xda <showDigit>
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	a0 e0       	ldi	r26, 0x00	; 0
 4f8:	b0 e4       	ldi	r27, 0x40	; 64
 4fa:	8b 83       	std	Y+3, r24	; 0x03
 4fc:	9c 83       	std	Y+4, r25	; 0x04
 4fe:	ad 83       	std	Y+5, r26	; 0x05
 500:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 502:	20 e0       	ldi	r18, 0x00	; 0
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	4a e7       	ldi	r20, 0x7A	; 122
 508:	55 e4       	ldi	r21, 0x45	; 69
 50a:	6b 81       	ldd	r22, Y+3	; 0x03
 50c:	7c 81       	ldd	r23, Y+4	; 0x04
 50e:	8d 81       	ldd	r24, Y+5	; 0x05
 510:	9e 81       	ldd	r25, Y+6	; 0x06
 512:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__mulsf3>
 516:	dc 01       	movw	r26, r24
 518:	cb 01       	movw	r24, r22
 51a:	8b ab       	std	Y+51, r24	; 0x33
 51c:	9c ab       	std	Y+52, r25	; 0x34
 51e:	ad ab       	std	Y+53, r26	; 0x35
 520:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	40 e8       	ldi	r20, 0x80	; 128
 528:	5f e3       	ldi	r21, 0x3F	; 63
 52a:	6b a9       	ldd	r22, Y+51	; 0x33
 52c:	7c a9       	ldd	r23, Y+52	; 0x34
 52e:	8d a9       	ldd	r24, Y+53	; 0x35
 530:	9e a9       	ldd	r25, Y+54	; 0x36
 532:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__cmpsf2>
 536:	88 23       	and	r24, r24
 538:	2c f4       	brge	.+10     	; 0x544 <main+0xd8>
		__ticks = 1;
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	98 af       	std	Y+56, r25	; 0x38
 540:	8f ab       	std	Y+55, r24	; 0x37
 542:	3f c0       	rjmp	.+126    	; 0x5c2 <main+0x156>
	else if (__tmp > 65535)
 544:	20 e0       	ldi	r18, 0x00	; 0
 546:	3f ef       	ldi	r19, 0xFF	; 255
 548:	4f e7       	ldi	r20, 0x7F	; 127
 54a:	57 e4       	ldi	r21, 0x47	; 71
 54c:	6b a9       	ldd	r22, Y+51	; 0x33
 54e:	7c a9       	ldd	r23, Y+52	; 0x34
 550:	8d a9       	ldd	r24, Y+53	; 0x35
 552:	9e a9       	ldd	r25, Y+54	; 0x36
 554:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__gesf2>
 558:	18 16       	cp	r1, r24
 55a:	4c f5       	brge	.+82     	; 0x5ae <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	40 e2       	ldi	r20, 0x20	; 32
 562:	51 e4       	ldi	r21, 0x41	; 65
 564:	6b 81       	ldd	r22, Y+3	; 0x03
 566:	7c 81       	ldd	r23, Y+4	; 0x04
 568:	8d 81       	ldd	r24, Y+5	; 0x05
 56a:	9e 81       	ldd	r25, Y+6	; 0x06
 56c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__mulsf3>
 570:	dc 01       	movw	r26, r24
 572:	cb 01       	movw	r24, r22
 574:	bc 01       	movw	r22, r24
 576:	cd 01       	movw	r24, r26
 578:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fixunssfsi>
 57c:	dc 01       	movw	r26, r24
 57e:	cb 01       	movw	r24, r22
 580:	98 af       	std	Y+56, r25	; 0x38
 582:	8f ab       	std	Y+55, r24	; 0x37
 584:	0f c0       	rjmp	.+30     	; 0x5a4 <main+0x138>
 586:	80 e9       	ldi	r24, 0x90	; 144
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	9a af       	std	Y+58, r25	; 0x3a
 58c:	89 af       	std	Y+57, r24	; 0x39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 58e:	89 ad       	ldd	r24, Y+57	; 0x39
 590:	9a ad       	ldd	r25, Y+58	; 0x3a
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	f1 f7       	brne	.-4      	; 0x592 <main+0x126>
 596:	9a af       	std	Y+58, r25	; 0x3a
 598:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 59a:	8f a9       	ldd	r24, Y+55	; 0x37
 59c:	98 ad       	ldd	r25, Y+56	; 0x38
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	98 af       	std	Y+56, r25	; 0x38
 5a2:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5a4:	8f a9       	ldd	r24, Y+55	; 0x37
 5a6:	98 ad       	ldd	r25, Y+56	; 0x38
 5a8:	89 2b       	or	r24, r25
 5aa:	69 f7       	brne	.-38     	; 0x586 <main+0x11a>
 5ac:	14 c0       	rjmp	.+40     	; 0x5d6 <main+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5ae:	6b a9       	ldd	r22, Y+51	; 0x33
 5b0:	7c a9       	ldd	r23, Y+52	; 0x34
 5b2:	8d a9       	ldd	r24, Y+53	; 0x35
 5b4:	9e a9       	ldd	r25, Y+54	; 0x36
 5b6:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fixunssfsi>
 5ba:	dc 01       	movw	r26, r24
 5bc:	cb 01       	movw	r24, r22
 5be:	98 af       	std	Y+56, r25	; 0x38
 5c0:	8f ab       	std	Y+55, r24	; 0x37
 5c2:	8f a9       	ldd	r24, Y+55	; 0x37
 5c4:	98 ad       	ldd	r25, Y+56	; 0x38
 5c6:	9c af       	std	Y+60, r25	; 0x3c
 5c8:	8b af       	std	Y+59, r24	; 0x3b
 5ca:	8b ad       	ldd	r24, Y+59	; 0x3b
 5cc:	9c ad       	ldd	r25, Y+60	; 0x3c
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <main+0x162>
 5d2:	9c af       	std	Y+60, r25	; 0x3c
 5d4:	8b af       	std	Y+59, r24	; 0x3b
		showDigit(d,2); _delay_ms(2);
 5d6:	8e ad       	ldd	r24, Y+62	; 0x3e
 5d8:	62 e0       	ldi	r22, 0x02	; 2
 5da:	0e 94 6d 00 	call	0xda	; 0xda <showDigit>
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	a0 e0       	ldi	r26, 0x00	; 0
 5e4:	b0 e4       	ldi	r27, 0x40	; 64
 5e6:	8f 83       	std	Y+7, r24	; 0x07
 5e8:	98 87       	std	Y+8, r25	; 0x08
 5ea:	a9 87       	std	Y+9, r26	; 0x09
 5ec:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 5ee:	20 e0       	ldi	r18, 0x00	; 0
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	4a e7       	ldi	r20, 0x7A	; 122
 5f4:	55 e4       	ldi	r21, 0x45	; 69
 5f6:	6f 81       	ldd	r22, Y+7	; 0x07
 5f8:	78 85       	ldd	r23, Y+8	; 0x08
 5fa:	89 85       	ldd	r24, Y+9	; 0x09
 5fc:	9a 85       	ldd	r25, Y+10	; 0x0a
 5fe:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__mulsf3>
 602:	dc 01       	movw	r26, r24
 604:	cb 01       	movw	r24, r22
 606:	89 a7       	std	Y+41, r24	; 0x29
 608:	9a a7       	std	Y+42, r25	; 0x2a
 60a:	ab a7       	std	Y+43, r26	; 0x2b
 60c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
 60e:	20 e0       	ldi	r18, 0x00	; 0
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	40 e8       	ldi	r20, 0x80	; 128
 614:	5f e3       	ldi	r21, 0x3F	; 63
 616:	69 a5       	ldd	r22, Y+41	; 0x29
 618:	7a a5       	ldd	r23, Y+42	; 0x2a
 61a:	8b a5       	ldd	r24, Y+43	; 0x2b
 61c:	9c a5       	ldd	r25, Y+44	; 0x2c
 61e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__cmpsf2>
 622:	88 23       	and	r24, r24
 624:	2c f4       	brge	.+10     	; 0x630 <main+0x1c4>
		__ticks = 1;
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	9e a7       	std	Y+46, r25	; 0x2e
 62c:	8d a7       	std	Y+45, r24	; 0x2d
 62e:	3f c0       	rjmp	.+126    	; 0x6ae <main+0x242>
	else if (__tmp > 65535)
 630:	20 e0       	ldi	r18, 0x00	; 0
 632:	3f ef       	ldi	r19, 0xFF	; 255
 634:	4f e7       	ldi	r20, 0x7F	; 127
 636:	57 e4       	ldi	r21, 0x47	; 71
 638:	69 a5       	ldd	r22, Y+41	; 0x29
 63a:	7a a5       	ldd	r23, Y+42	; 0x2a
 63c:	8b a5       	ldd	r24, Y+43	; 0x2b
 63e:	9c a5       	ldd	r25, Y+44	; 0x2c
 640:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__gesf2>
 644:	18 16       	cp	r1, r24
 646:	4c f5       	brge	.+82     	; 0x69a <main+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 648:	20 e0       	ldi	r18, 0x00	; 0
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	40 e2       	ldi	r20, 0x20	; 32
 64e:	51 e4       	ldi	r21, 0x41	; 65
 650:	6f 81       	ldd	r22, Y+7	; 0x07
 652:	78 85       	ldd	r23, Y+8	; 0x08
 654:	89 85       	ldd	r24, Y+9	; 0x09
 656:	9a 85       	ldd	r25, Y+10	; 0x0a
 658:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__mulsf3>
 65c:	dc 01       	movw	r26, r24
 65e:	cb 01       	movw	r24, r22
 660:	bc 01       	movw	r22, r24
 662:	cd 01       	movw	r24, r26
 664:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fixunssfsi>
 668:	dc 01       	movw	r26, r24
 66a:	cb 01       	movw	r24, r22
 66c:	9e a7       	std	Y+46, r25	; 0x2e
 66e:	8d a7       	std	Y+45, r24	; 0x2d
 670:	0f c0       	rjmp	.+30     	; 0x690 <main+0x224>
 672:	80 e9       	ldi	r24, 0x90	; 144
 674:	91 e0       	ldi	r25, 0x01	; 1
 676:	98 ab       	std	Y+48, r25	; 0x30
 678:	8f a7       	std	Y+47, r24	; 0x2f
 67a:	8f a5       	ldd	r24, Y+47	; 0x2f
 67c:	98 a9       	ldd	r25, Y+48	; 0x30
 67e:	01 97       	sbiw	r24, 0x01	; 1
 680:	f1 f7       	brne	.-4      	; 0x67e <main+0x212>
 682:	98 ab       	std	Y+48, r25	; 0x30
 684:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 686:	8d a5       	ldd	r24, Y+45	; 0x2d
 688:	9e a5       	ldd	r25, Y+46	; 0x2e
 68a:	01 97       	sbiw	r24, 0x01	; 1
 68c:	9e a7       	std	Y+46, r25	; 0x2e
 68e:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 690:	8d a5       	ldd	r24, Y+45	; 0x2d
 692:	9e a5       	ldd	r25, Y+46	; 0x2e
 694:	89 2b       	or	r24, r25
 696:	69 f7       	brne	.-38     	; 0x672 <main+0x206>
 698:	14 c0       	rjmp	.+40     	; 0x6c2 <main+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 69a:	69 a5       	ldd	r22, Y+41	; 0x29
 69c:	7a a5       	ldd	r23, Y+42	; 0x2a
 69e:	8b a5       	ldd	r24, Y+43	; 0x2b
 6a0:	9c a5       	ldd	r25, Y+44	; 0x2c
 6a2:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fixunssfsi>
 6a6:	dc 01       	movw	r26, r24
 6a8:	cb 01       	movw	r24, r22
 6aa:	9e a7       	std	Y+46, r25	; 0x2e
 6ac:	8d a7       	std	Y+45, r24	; 0x2d
 6ae:	8d a5       	ldd	r24, Y+45	; 0x2d
 6b0:	9e a5       	ldd	r25, Y+46	; 0x2e
 6b2:	9a ab       	std	Y+50, r25	; 0x32
 6b4:	89 ab       	std	Y+49, r24	; 0x31
 6b6:	89 a9       	ldd	r24, Y+49	; 0x31
 6b8:	9a a9       	ldd	r25, Y+50	; 0x32
 6ba:	01 97       	sbiw	r24, 0x01	; 1
 6bc:	f1 f7       	brne	.-4      	; 0x6ba <main+0x24e>
 6be:	9a ab       	std	Y+50, r25	; 0x32
 6c0:	89 ab       	std	Y+49, r24	; 0x31
		showDigit(c,1); _delay_ms(2);
 6c2:	8f ad       	ldd	r24, Y+63	; 0x3f
 6c4:	61 e0       	ldi	r22, 0x01	; 1
 6c6:	0e 94 6d 00 	call	0xda	; 0xda <showDigit>
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	a0 e0       	ldi	r26, 0x00	; 0
 6d0:	b0 e4       	ldi	r27, 0x40	; 64
 6d2:	8b 87       	std	Y+11, r24	; 0x0b
 6d4:	9c 87       	std	Y+12, r25	; 0x0c
 6d6:	ad 87       	std	Y+13, r26	; 0x0d
 6d8:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 6da:	20 e0       	ldi	r18, 0x00	; 0
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	4a e7       	ldi	r20, 0x7A	; 122
 6e0:	55 e4       	ldi	r21, 0x45	; 69
 6e2:	6b 85       	ldd	r22, Y+11	; 0x0b
 6e4:	7c 85       	ldd	r23, Y+12	; 0x0c
 6e6:	8d 85       	ldd	r24, Y+13	; 0x0d
 6e8:	9e 85       	ldd	r25, Y+14	; 0x0e
 6ea:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__mulsf3>
 6ee:	dc 01       	movw	r26, r24
 6f0:	cb 01       	movw	r24, r22
 6f2:	8f 8f       	std	Y+31, r24	; 0x1f
 6f4:	98 a3       	std	Y+32, r25	; 0x20
 6f6:	a9 a3       	std	Y+33, r26	; 0x21
 6f8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
 6fa:	20 e0       	ldi	r18, 0x00	; 0
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	40 e8       	ldi	r20, 0x80	; 128
 700:	5f e3       	ldi	r21, 0x3F	; 63
 702:	6f 8d       	ldd	r22, Y+31	; 0x1f
 704:	78 a1       	ldd	r23, Y+32	; 0x20
 706:	89 a1       	ldd	r24, Y+33	; 0x21
 708:	9a a1       	ldd	r25, Y+34	; 0x22
 70a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__cmpsf2>
 70e:	88 23       	and	r24, r24
 710:	2c f4       	brge	.+10     	; 0x71c <main+0x2b0>
		__ticks = 1;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	9c a3       	std	Y+36, r25	; 0x24
 718:	8b a3       	std	Y+35, r24	; 0x23
 71a:	3f c0       	rjmp	.+126    	; 0x79a <main+0x32e>
	else if (__tmp > 65535)
 71c:	20 e0       	ldi	r18, 0x00	; 0
 71e:	3f ef       	ldi	r19, 0xFF	; 255
 720:	4f e7       	ldi	r20, 0x7F	; 127
 722:	57 e4       	ldi	r21, 0x47	; 71
 724:	6f 8d       	ldd	r22, Y+31	; 0x1f
 726:	78 a1       	ldd	r23, Y+32	; 0x20
 728:	89 a1       	ldd	r24, Y+33	; 0x21
 72a:	9a a1       	ldd	r25, Y+34	; 0x22
 72c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__gesf2>
 730:	18 16       	cp	r1, r24
 732:	4c f5       	brge	.+82     	; 0x786 <main+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 734:	20 e0       	ldi	r18, 0x00	; 0
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	40 e2       	ldi	r20, 0x20	; 32
 73a:	51 e4       	ldi	r21, 0x41	; 65
 73c:	6b 85       	ldd	r22, Y+11	; 0x0b
 73e:	7c 85       	ldd	r23, Y+12	; 0x0c
 740:	8d 85       	ldd	r24, Y+13	; 0x0d
 742:	9e 85       	ldd	r25, Y+14	; 0x0e
 744:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__mulsf3>
 748:	dc 01       	movw	r26, r24
 74a:	cb 01       	movw	r24, r22
 74c:	bc 01       	movw	r22, r24
 74e:	cd 01       	movw	r24, r26
 750:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fixunssfsi>
 754:	dc 01       	movw	r26, r24
 756:	cb 01       	movw	r24, r22
 758:	9c a3       	std	Y+36, r25	; 0x24
 75a:	8b a3       	std	Y+35, r24	; 0x23
 75c:	0f c0       	rjmp	.+30     	; 0x77c <main+0x310>
 75e:	80 e9       	ldi	r24, 0x90	; 144
 760:	91 e0       	ldi	r25, 0x01	; 1
 762:	9e a3       	std	Y+38, r25	; 0x26
 764:	8d a3       	std	Y+37, r24	; 0x25
 766:	8d a1       	ldd	r24, Y+37	; 0x25
 768:	9e a1       	ldd	r25, Y+38	; 0x26
 76a:	01 97       	sbiw	r24, 0x01	; 1
 76c:	f1 f7       	brne	.-4      	; 0x76a <main+0x2fe>
 76e:	9e a3       	std	Y+38, r25	; 0x26
 770:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 772:	8b a1       	ldd	r24, Y+35	; 0x23
 774:	9c a1       	ldd	r25, Y+36	; 0x24
 776:	01 97       	sbiw	r24, 0x01	; 1
 778:	9c a3       	std	Y+36, r25	; 0x24
 77a:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 77c:	8b a1       	ldd	r24, Y+35	; 0x23
 77e:	9c a1       	ldd	r25, Y+36	; 0x24
 780:	89 2b       	or	r24, r25
 782:	69 f7       	brne	.-38     	; 0x75e <main+0x2f2>
 784:	14 c0       	rjmp	.+40     	; 0x7ae <main+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 786:	6f 8d       	ldd	r22, Y+31	; 0x1f
 788:	78 a1       	ldd	r23, Y+32	; 0x20
 78a:	89 a1       	ldd	r24, Y+33	; 0x21
 78c:	9a a1       	ldd	r25, Y+34	; 0x22
 78e:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fixunssfsi>
 792:	dc 01       	movw	r26, r24
 794:	cb 01       	movw	r24, r22
 796:	9c a3       	std	Y+36, r25	; 0x24
 798:	8b a3       	std	Y+35, r24	; 0x23
 79a:	8b a1       	ldd	r24, Y+35	; 0x23
 79c:	9c a1       	ldd	r25, Y+36	; 0x24
 79e:	98 a7       	std	Y+40, r25	; 0x28
 7a0:	8f a3       	std	Y+39, r24	; 0x27
 7a2:	8f a1       	ldd	r24, Y+39	; 0x27
 7a4:	98 a5       	ldd	r25, Y+40	; 0x28
 7a6:	01 97       	sbiw	r24, 0x01	; 1
 7a8:	f1 f7       	brne	.-4      	; 0x7a6 <main+0x33a>
 7aa:	98 a7       	std	Y+40, r25	; 0x28
 7ac:	8f a3       	std	Y+39, r24	; 0x27
		showDigit(m,0); _delay_ms(2);
 7ae:	ce 01       	movw	r24, r28
 7b0:	80 5c       	subi	r24, 0xC0	; 192
 7b2:	9f 4f       	sbci	r25, 0xFF	; 255
 7b4:	fc 01       	movw	r30, r24
 7b6:	80 81       	ld	r24, Z
 7b8:	60 e0       	ldi	r22, 0x00	; 0
 7ba:	0e 94 6d 00 	call	0xda	; 0xda <showDigit>
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	a0 e0       	ldi	r26, 0x00	; 0
 7c4:	b0 e4       	ldi	r27, 0x40	; 64
 7c6:	89 8b       	std	Y+17, r24	; 0x11
 7c8:	9a 8b       	std	Y+18, r25	; 0x12
 7ca:	ab 8b       	std	Y+19, r26	; 0x13
 7cc:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 7ce:	20 e0       	ldi	r18, 0x00	; 0
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	4a e7       	ldi	r20, 0x7A	; 122
 7d4:	55 e4       	ldi	r21, 0x45	; 69
 7d6:	69 89       	ldd	r22, Y+17	; 0x11
 7d8:	7a 89       	ldd	r23, Y+18	; 0x12
 7da:	8b 89       	ldd	r24, Y+19	; 0x13
 7dc:	9c 89       	ldd	r25, Y+20	; 0x14
 7de:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__mulsf3>
 7e2:	dc 01       	movw	r26, r24
 7e4:	cb 01       	movw	r24, r22
 7e6:	8d 8b       	std	Y+21, r24	; 0x15
 7e8:	9e 8b       	std	Y+22, r25	; 0x16
 7ea:	af 8b       	std	Y+23, r26	; 0x17
 7ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 7ee:	20 e0       	ldi	r18, 0x00	; 0
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	40 e8       	ldi	r20, 0x80	; 128
 7f4:	5f e3       	ldi	r21, 0x3F	; 63
 7f6:	6d 89       	ldd	r22, Y+21	; 0x15
 7f8:	7e 89       	ldd	r23, Y+22	; 0x16
 7fa:	8f 89       	ldd	r24, Y+23	; 0x17
 7fc:	98 8d       	ldd	r25, Y+24	; 0x18
 7fe:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__cmpsf2>
 802:	88 23       	and	r24, r24
 804:	2c f4       	brge	.+10     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
		__ticks = 1;
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	9a 8f       	std	Y+26, r25	; 0x1a
 80c:	89 8f       	std	Y+25, r24	; 0x19
 80e:	3f c0       	rjmp	.+126    	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
	else if (__tmp > 65535)
 810:	20 e0       	ldi	r18, 0x00	; 0
 812:	3f ef       	ldi	r19, 0xFF	; 255
 814:	4f e7       	ldi	r20, 0x7F	; 127
 816:	57 e4       	ldi	r21, 0x47	; 71
 818:	6d 89       	ldd	r22, Y+21	; 0x15
 81a:	7e 89       	ldd	r23, Y+22	; 0x16
 81c:	8f 89       	ldd	r24, Y+23	; 0x17
 81e:	98 8d       	ldd	r25, Y+24	; 0x18
 820:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__gesf2>
 824:	18 16       	cp	r1, r24
 826:	4c f5       	brge	.+82     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 828:	20 e0       	ldi	r18, 0x00	; 0
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	40 e2       	ldi	r20, 0x20	; 32
 82e:	51 e4       	ldi	r21, 0x41	; 65
 830:	69 89       	ldd	r22, Y+17	; 0x11
 832:	7a 89       	ldd	r23, Y+18	; 0x12
 834:	8b 89       	ldd	r24, Y+19	; 0x13
 836:	9c 89       	ldd	r25, Y+20	; 0x14
 838:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__mulsf3>
 83c:	dc 01       	movw	r26, r24
 83e:	cb 01       	movw	r24, r22
 840:	bc 01       	movw	r22, r24
 842:	cd 01       	movw	r24, r26
 844:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fixunssfsi>
 848:	dc 01       	movw	r26, r24
 84a:	cb 01       	movw	r24, r22
 84c:	9a 8f       	std	Y+26, r25	; 0x1a
 84e:	89 8f       	std	Y+25, r24	; 0x19
 850:	0f c0       	rjmp	.+30     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 852:	80 e9       	ldi	r24, 0x90	; 144
 854:	91 e0       	ldi	r25, 0x01	; 1
 856:	9c 8f       	std	Y+28, r25	; 0x1c
 858:	8b 8f       	std	Y+27, r24	; 0x1b
 85a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 85c:	9c 8d       	ldd	r25, Y+28	; 0x1c
 85e:	01 97       	sbiw	r24, 0x01	; 1
 860:	f1 f7       	brne	.-4      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 862:	9c 8f       	std	Y+28, r25	; 0x1c
 864:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 866:	89 8d       	ldd	r24, Y+25	; 0x19
 868:	9a 8d       	ldd	r25, Y+26	; 0x1a
 86a:	01 97       	sbiw	r24, 0x01	; 1
 86c:	9a 8f       	std	Y+26, r25	; 0x1a
 86e:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 870:	89 8d       	ldd	r24, Y+25	; 0x19
 872:	9a 8d       	ldd	r25, Y+26	; 0x1a
 874:	89 2b       	or	r24, r25
 876:	69 f7       	brne	.-38     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 878:	14 c0       	rjmp	.+40     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 87a:	6d 89       	ldd	r22, Y+21	; 0x15
 87c:	7e 89       	ldd	r23, Y+22	; 0x16
 87e:	8f 89       	ldd	r24, Y+23	; 0x17
 880:	98 8d       	ldd	r25, Y+24	; 0x18
 882:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fixunssfsi>
 886:	dc 01       	movw	r26, r24
 888:	cb 01       	movw	r24, r22
 88a:	9a 8f       	std	Y+26, r25	; 0x1a
 88c:	89 8f       	std	Y+25, r24	; 0x19
 88e:	89 8d       	ldd	r24, Y+25	; 0x19
 890:	9a 8d       	ldd	r25, Y+26	; 0x1a
 892:	9e 8f       	std	Y+30, r25	; 0x1e
 894:	8d 8f       	std	Y+29, r24	; 0x1d
 896:	8d 8d       	ldd	r24, Y+29	; 0x1d
 898:	9e 8d       	ldd	r25, Y+30	; 0x1e
 89a:	01 97       	sbiw	r24, 0x01	; 1
 89c:	f1 f7       	brne	.-4      	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 89e:	9e 8f       	std	Y+30, r25	; 0x1e
 8a0:	8d 8f       	std	Y+29, r24	; 0x1d

		// envia UART a cada ~200ms
		if (++timer >= 50) {
 8a2:	89 81       	ldd	r24, Y+1	; 0x01
 8a4:	9a 81       	ldd	r25, Y+2	; 0x02
 8a6:	01 96       	adiw	r24, 0x01	; 1
 8a8:	9a 83       	std	Y+2, r25	; 0x02
 8aa:	89 83       	std	Y+1, r24	; 0x01
 8ac:	89 81       	ldd	r24, Y+1	; 0x01
 8ae:	9a 81       	ldd	r25, Y+2	; 0x02
 8b0:	c2 97       	sbiw	r24, 0x32	; 50
 8b2:	08 f4       	brcc	.+2      	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8b4:	1a ce       	rjmp	.-972    	; 0x4ea <main+0x7e>
			timer = 0;
 8b6:	1a 82       	std	Y+2, r1	; 0x02
 8b8:	19 82       	std	Y+1, r1	; 0x01
			uint16_t raw = adc_read();
 8ba:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <adc_read>
 8be:	98 8b       	std	Y+16, r25	; 0x10
 8c0:	8f 87       	std	Y+15, r24	; 0x0f
			char buf[6];
			itoa(raw, buf, 10);
 8c2:	8f 85       	ldd	r24, Y+15	; 0x0f
 8c4:	98 89       	ldd	r25, Y+16	; 0x10
 8c6:	9e 01       	movw	r18, r28
 8c8:	2f 5b       	subi	r18, 0xBF	; 191
 8ca:	3f 4f       	sbci	r19, 0xFF	; 255
 8cc:	4a e0       	ldi	r20, 0x0A	; 10
 8ce:	50 e0       	ldi	r21, 0x00	; 0
 8d0:	b9 01       	movw	r22, r18
 8d2:	0e 94 b4 05 	call	0xb68	; 0xb68 <itoa>
			uart_puts(buf);
 8d6:	ce 01       	movw	r24, r28
 8d8:	8f 5b       	subi	r24, 0xBF	; 191
 8da:	9f 4f       	sbci	r25, 0xFF	; 255
 8dc:	0e 94 a4 01 	call	0x348	; 0x348 <uart_puts>
		}
	}
 8e0:	04 ce       	rjmp	.-1016   	; 0x4ea <main+0x7e>

000008e2 <__cmpsf2>:
 8e2:	0e 94 a5 04 	call	0x94a	; 0x94a <__fp_cmp>
 8e6:	08 f4       	brcc	.+2      	; 0x8ea <__cmpsf2+0x8>
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	08 95       	ret

000008ec <__fixunssfsi>:
 8ec:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fp_splitA>
 8f0:	88 f0       	brcs	.+34     	; 0x914 <__stack+0x15>
 8f2:	9f 57       	subi	r25, 0x7F	; 127
 8f4:	98 f0       	brcs	.+38     	; 0x91c <__stack+0x1d>
 8f6:	b9 2f       	mov	r27, r25
 8f8:	99 27       	eor	r25, r25
 8fa:	b7 51       	subi	r27, 0x17	; 23
 8fc:	b0 f0       	brcs	.+44     	; 0x92a <__stack+0x2b>
 8fe:	e1 f0       	breq	.+56     	; 0x938 <__stack+0x39>
 900:	66 0f       	add	r22, r22
 902:	77 1f       	adc	r23, r23
 904:	88 1f       	adc	r24, r24
 906:	99 1f       	adc	r25, r25
 908:	1a f0       	brmi	.+6      	; 0x910 <__stack+0x11>
 90a:	ba 95       	dec	r27
 90c:	c9 f7       	brne	.-14     	; 0x900 <__stack+0x1>
 90e:	14 c0       	rjmp	.+40     	; 0x938 <__stack+0x39>
 910:	b1 30       	cpi	r27, 0x01	; 1
 912:	91 f0       	breq	.+36     	; 0x938 <__stack+0x39>
 914:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__fp_zero>
 918:	b1 e0       	ldi	r27, 0x01	; 1
 91a:	08 95       	ret
 91c:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_zero>
 920:	67 2f       	mov	r22, r23
 922:	78 2f       	mov	r23, r24
 924:	88 27       	eor	r24, r24
 926:	b8 5f       	subi	r27, 0xF8	; 248
 928:	39 f0       	breq	.+14     	; 0x938 <__stack+0x39>
 92a:	b9 3f       	cpi	r27, 0xF9	; 249
 92c:	cc f3       	brlt	.-14     	; 0x920 <__stack+0x21>
 92e:	86 95       	lsr	r24
 930:	77 95       	ror	r23
 932:	67 95       	ror	r22
 934:	b3 95       	inc	r27
 936:	d9 f7       	brne	.-10     	; 0x92e <__stack+0x2f>
 938:	3e f4       	brtc	.+14     	; 0x948 <__stack+0x49>
 93a:	90 95       	com	r25
 93c:	80 95       	com	r24
 93e:	70 95       	com	r23
 940:	61 95       	neg	r22
 942:	7f 4f       	sbci	r23, 0xFF	; 255
 944:	8f 4f       	sbci	r24, 0xFF	; 255
 946:	9f 4f       	sbci	r25, 0xFF	; 255
 948:	08 95       	ret

0000094a <__fp_cmp>:
 94a:	99 0f       	add	r25, r25
 94c:	00 08       	sbc	r0, r0
 94e:	55 0f       	add	r21, r21
 950:	aa 0b       	sbc	r26, r26
 952:	e0 e8       	ldi	r30, 0x80	; 128
 954:	fe ef       	ldi	r31, 0xFE	; 254
 956:	16 16       	cp	r1, r22
 958:	17 06       	cpc	r1, r23
 95a:	e8 07       	cpc	r30, r24
 95c:	f9 07       	cpc	r31, r25
 95e:	c0 f0       	brcs	.+48     	; 0x990 <__fp_cmp+0x46>
 960:	12 16       	cp	r1, r18
 962:	13 06       	cpc	r1, r19
 964:	e4 07       	cpc	r30, r20
 966:	f5 07       	cpc	r31, r21
 968:	98 f0       	brcs	.+38     	; 0x990 <__fp_cmp+0x46>
 96a:	62 1b       	sub	r22, r18
 96c:	73 0b       	sbc	r23, r19
 96e:	84 0b       	sbc	r24, r20
 970:	95 0b       	sbc	r25, r21
 972:	39 f4       	brne	.+14     	; 0x982 <__fp_cmp+0x38>
 974:	0a 26       	eor	r0, r26
 976:	61 f0       	breq	.+24     	; 0x990 <__fp_cmp+0x46>
 978:	23 2b       	or	r18, r19
 97a:	24 2b       	or	r18, r20
 97c:	25 2b       	or	r18, r21
 97e:	21 f4       	brne	.+8      	; 0x988 <__fp_cmp+0x3e>
 980:	08 95       	ret
 982:	0a 26       	eor	r0, r26
 984:	09 f4       	brne	.+2      	; 0x988 <__fp_cmp+0x3e>
 986:	a1 40       	sbci	r26, 0x01	; 1
 988:	a6 95       	lsr	r26
 98a:	8f ef       	ldi	r24, 0xFF	; 255
 98c:	81 1d       	adc	r24, r1
 98e:	81 1d       	adc	r24, r1
 990:	08 95       	ret

00000992 <__fp_split3>:
 992:	57 fd       	sbrc	r21, 7
 994:	90 58       	subi	r25, 0x80	; 128
 996:	44 0f       	add	r20, r20
 998:	55 1f       	adc	r21, r21
 99a:	59 f0       	breq	.+22     	; 0x9b2 <__fp_splitA+0x10>
 99c:	5f 3f       	cpi	r21, 0xFF	; 255
 99e:	71 f0       	breq	.+28     	; 0x9bc <__fp_splitA+0x1a>
 9a0:	47 95       	ror	r20

000009a2 <__fp_splitA>:
 9a2:	88 0f       	add	r24, r24
 9a4:	97 fb       	bst	r25, 7
 9a6:	99 1f       	adc	r25, r25
 9a8:	61 f0       	breq	.+24     	; 0x9c2 <__fp_splitA+0x20>
 9aa:	9f 3f       	cpi	r25, 0xFF	; 255
 9ac:	79 f0       	breq	.+30     	; 0x9cc <__fp_splitA+0x2a>
 9ae:	87 95       	ror	r24
 9b0:	08 95       	ret
 9b2:	12 16       	cp	r1, r18
 9b4:	13 06       	cpc	r1, r19
 9b6:	14 06       	cpc	r1, r20
 9b8:	55 1f       	adc	r21, r21
 9ba:	f2 cf       	rjmp	.-28     	; 0x9a0 <__fp_split3+0xe>
 9bc:	46 95       	lsr	r20
 9be:	f1 df       	rcall	.-30     	; 0x9a2 <__fp_splitA>
 9c0:	08 c0       	rjmp	.+16     	; 0x9d2 <__fp_splitA+0x30>
 9c2:	16 16       	cp	r1, r22
 9c4:	17 06       	cpc	r1, r23
 9c6:	18 06       	cpc	r1, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	f1 cf       	rjmp	.-30     	; 0x9ae <__fp_splitA+0xc>
 9cc:	86 95       	lsr	r24
 9ce:	71 05       	cpc	r23, r1
 9d0:	61 05       	cpc	r22, r1
 9d2:	08 94       	sec
 9d4:	08 95       	ret

000009d6 <__fp_zero>:
 9d6:	e8 94       	clt

000009d8 <__fp_szero>:
 9d8:	bb 27       	eor	r27, r27
 9da:	66 27       	eor	r22, r22
 9dc:	77 27       	eor	r23, r23
 9de:	cb 01       	movw	r24, r22
 9e0:	97 f9       	bld	r25, 7
 9e2:	08 95       	ret

000009e4 <__gesf2>:
 9e4:	0e 94 a5 04 	call	0x94a	; 0x94a <__fp_cmp>
 9e8:	08 f4       	brcc	.+2      	; 0x9ec <__gesf2+0x8>
 9ea:	8f ef       	ldi	r24, 0xFF	; 255
 9ec:	08 95       	ret

000009ee <__mulsf3>:
 9ee:	0e 94 0a 05 	call	0xa14	; 0xa14 <__mulsf3x>
 9f2:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_round>
 9f6:	0e 94 6d 05 	call	0xada	; 0xada <__fp_pscA>
 9fa:	38 f0       	brcs	.+14     	; 0xa0a <__mulsf3+0x1c>
 9fc:	0e 94 74 05 	call	0xae8	; 0xae8 <__fp_pscB>
 a00:	20 f0       	brcs	.+8      	; 0xa0a <__mulsf3+0x1c>
 a02:	95 23       	and	r25, r21
 a04:	11 f0       	breq	.+4      	; 0xa0a <__mulsf3+0x1c>
 a06:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__fp_inf>
 a0a:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__fp_nan>
 a0e:	11 24       	eor	r1, r1
 a10:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_szero>

00000a14 <__mulsf3x>:
 a14:	0e 94 c9 04 	call	0x992	; 0x992 <__fp_split3>
 a18:	70 f3       	brcs	.-36     	; 0x9f6 <__mulsf3+0x8>

00000a1a <__mulsf3_pse>:
 a1a:	95 9f       	mul	r25, r21
 a1c:	c1 f3       	breq	.-16     	; 0xa0e <__mulsf3+0x20>
 a1e:	95 0f       	add	r25, r21
 a20:	50 e0       	ldi	r21, 0x00	; 0
 a22:	55 1f       	adc	r21, r21
 a24:	62 9f       	mul	r22, r18
 a26:	f0 01       	movw	r30, r0
 a28:	72 9f       	mul	r23, r18
 a2a:	bb 27       	eor	r27, r27
 a2c:	f0 0d       	add	r31, r0
 a2e:	b1 1d       	adc	r27, r1
 a30:	63 9f       	mul	r22, r19
 a32:	aa 27       	eor	r26, r26
 a34:	f0 0d       	add	r31, r0
 a36:	b1 1d       	adc	r27, r1
 a38:	aa 1f       	adc	r26, r26
 a3a:	64 9f       	mul	r22, r20
 a3c:	66 27       	eor	r22, r22
 a3e:	b0 0d       	add	r27, r0
 a40:	a1 1d       	adc	r26, r1
 a42:	66 1f       	adc	r22, r22
 a44:	82 9f       	mul	r24, r18
 a46:	22 27       	eor	r18, r18
 a48:	b0 0d       	add	r27, r0
 a4a:	a1 1d       	adc	r26, r1
 a4c:	62 1f       	adc	r22, r18
 a4e:	73 9f       	mul	r23, r19
 a50:	b0 0d       	add	r27, r0
 a52:	a1 1d       	adc	r26, r1
 a54:	62 1f       	adc	r22, r18
 a56:	83 9f       	mul	r24, r19
 a58:	a0 0d       	add	r26, r0
 a5a:	61 1d       	adc	r22, r1
 a5c:	22 1f       	adc	r18, r18
 a5e:	74 9f       	mul	r23, r20
 a60:	33 27       	eor	r19, r19
 a62:	a0 0d       	add	r26, r0
 a64:	61 1d       	adc	r22, r1
 a66:	23 1f       	adc	r18, r19
 a68:	84 9f       	mul	r24, r20
 a6a:	60 0d       	add	r22, r0
 a6c:	21 1d       	adc	r18, r1
 a6e:	82 2f       	mov	r24, r18
 a70:	76 2f       	mov	r23, r22
 a72:	6a 2f       	mov	r22, r26
 a74:	11 24       	eor	r1, r1
 a76:	9f 57       	subi	r25, 0x7F	; 127
 a78:	50 40       	sbci	r21, 0x00	; 0
 a7a:	9a f0       	brmi	.+38     	; 0xaa2 <__mulsf3_pse+0x88>
 a7c:	f1 f0       	breq	.+60     	; 0xaba <__mulsf3_pse+0xa0>
 a7e:	88 23       	and	r24, r24
 a80:	4a f0       	brmi	.+18     	; 0xa94 <__mulsf3_pse+0x7a>
 a82:	ee 0f       	add	r30, r30
 a84:	ff 1f       	adc	r31, r31
 a86:	bb 1f       	adc	r27, r27
 a88:	66 1f       	adc	r22, r22
 a8a:	77 1f       	adc	r23, r23
 a8c:	88 1f       	adc	r24, r24
 a8e:	91 50       	subi	r25, 0x01	; 1
 a90:	50 40       	sbci	r21, 0x00	; 0
 a92:	a9 f7       	brne	.-22     	; 0xa7e <__mulsf3_pse+0x64>
 a94:	9e 3f       	cpi	r25, 0xFE	; 254
 a96:	51 05       	cpc	r21, r1
 a98:	80 f0       	brcs	.+32     	; 0xaba <__mulsf3_pse+0xa0>
 a9a:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__fp_inf>
 a9e:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_szero>
 aa2:	5f 3f       	cpi	r21, 0xFF	; 255
 aa4:	e4 f3       	brlt	.-8      	; 0xa9e <__mulsf3_pse+0x84>
 aa6:	98 3e       	cpi	r25, 0xE8	; 232
 aa8:	d4 f3       	brlt	.-12     	; 0xa9e <__mulsf3_pse+0x84>
 aaa:	86 95       	lsr	r24
 aac:	77 95       	ror	r23
 aae:	67 95       	ror	r22
 ab0:	b7 95       	ror	r27
 ab2:	f7 95       	ror	r31
 ab4:	e7 95       	ror	r30
 ab6:	9f 5f       	subi	r25, 0xFF	; 255
 ab8:	c1 f7       	brne	.-16     	; 0xaaa <__mulsf3_pse+0x90>
 aba:	fe 2b       	or	r31, r30
 abc:	88 0f       	add	r24, r24
 abe:	91 1d       	adc	r25, r1
 ac0:	96 95       	lsr	r25
 ac2:	87 95       	ror	r24
 ac4:	97 f9       	bld	r25, 7
 ac6:	08 95       	ret

00000ac8 <__fp_inf>:
 ac8:	97 f9       	bld	r25, 7
 aca:	9f 67       	ori	r25, 0x7F	; 127
 acc:	80 e8       	ldi	r24, 0x80	; 128
 ace:	70 e0       	ldi	r23, 0x00	; 0
 ad0:	60 e0       	ldi	r22, 0x00	; 0
 ad2:	08 95       	ret

00000ad4 <__fp_nan>:
 ad4:	9f ef       	ldi	r25, 0xFF	; 255
 ad6:	80 ec       	ldi	r24, 0xC0	; 192
 ad8:	08 95       	ret

00000ada <__fp_pscA>:
 ada:	00 24       	eor	r0, r0
 adc:	0a 94       	dec	r0
 ade:	16 16       	cp	r1, r22
 ae0:	17 06       	cpc	r1, r23
 ae2:	18 06       	cpc	r1, r24
 ae4:	09 06       	cpc	r0, r25
 ae6:	08 95       	ret

00000ae8 <__fp_pscB>:
 ae8:	00 24       	eor	r0, r0
 aea:	0a 94       	dec	r0
 aec:	12 16       	cp	r1, r18
 aee:	13 06       	cpc	r1, r19
 af0:	14 06       	cpc	r1, r20
 af2:	05 06       	cpc	r0, r21
 af4:	08 95       	ret

00000af6 <__fp_round>:
 af6:	09 2e       	mov	r0, r25
 af8:	03 94       	inc	r0
 afa:	00 0c       	add	r0, r0
 afc:	11 f4       	brne	.+4      	; 0xb02 <__fp_round+0xc>
 afe:	88 23       	and	r24, r24
 b00:	52 f0       	brmi	.+20     	; 0xb16 <__fp_round+0x20>
 b02:	bb 0f       	add	r27, r27
 b04:	40 f4       	brcc	.+16     	; 0xb16 <__fp_round+0x20>
 b06:	bf 2b       	or	r27, r31
 b08:	11 f4       	brne	.+4      	; 0xb0e <__fp_round+0x18>
 b0a:	60 ff       	sbrs	r22, 0
 b0c:	04 c0       	rjmp	.+8      	; 0xb16 <__fp_round+0x20>
 b0e:	6f 5f       	subi	r22, 0xFF	; 255
 b10:	7f 4f       	sbci	r23, 0xFF	; 255
 b12:	8f 4f       	sbci	r24, 0xFF	; 255
 b14:	9f 4f       	sbci	r25, 0xFF	; 255
 b16:	08 95       	ret

00000b18 <__divmodhi4>:
 b18:	97 fb       	bst	r25, 7
 b1a:	07 2e       	mov	r0, r23
 b1c:	16 f4       	brtc	.+4      	; 0xb22 <__divmodhi4+0xa>
 b1e:	00 94       	com	r0
 b20:	07 d0       	rcall	.+14     	; 0xb30 <__divmodhi4_neg1>
 b22:	77 fd       	sbrc	r23, 7
 b24:	09 d0       	rcall	.+18     	; 0xb38 <__divmodhi4_neg2>
 b26:	0e 94 a0 05 	call	0xb40	; 0xb40 <__udivmodhi4>
 b2a:	07 fc       	sbrc	r0, 7
 b2c:	05 d0       	rcall	.+10     	; 0xb38 <__divmodhi4_neg2>
 b2e:	3e f4       	brtc	.+14     	; 0xb3e <__divmodhi4_exit>

00000b30 <__divmodhi4_neg1>:
 b30:	90 95       	com	r25
 b32:	81 95       	neg	r24
 b34:	9f 4f       	sbci	r25, 0xFF	; 255
 b36:	08 95       	ret

00000b38 <__divmodhi4_neg2>:
 b38:	70 95       	com	r23
 b3a:	61 95       	neg	r22
 b3c:	7f 4f       	sbci	r23, 0xFF	; 255

00000b3e <__divmodhi4_exit>:
 b3e:	08 95       	ret

00000b40 <__udivmodhi4>:
 b40:	aa 1b       	sub	r26, r26
 b42:	bb 1b       	sub	r27, r27
 b44:	51 e1       	ldi	r21, 0x11	; 17
 b46:	07 c0       	rjmp	.+14     	; 0xb56 <__udivmodhi4_ep>

00000b48 <__udivmodhi4_loop>:
 b48:	aa 1f       	adc	r26, r26
 b4a:	bb 1f       	adc	r27, r27
 b4c:	a6 17       	cp	r26, r22
 b4e:	b7 07       	cpc	r27, r23
 b50:	10 f0       	brcs	.+4      	; 0xb56 <__udivmodhi4_ep>
 b52:	a6 1b       	sub	r26, r22
 b54:	b7 0b       	sbc	r27, r23

00000b56 <__udivmodhi4_ep>:
 b56:	88 1f       	adc	r24, r24
 b58:	99 1f       	adc	r25, r25
 b5a:	5a 95       	dec	r21
 b5c:	a9 f7       	brne	.-22     	; 0xb48 <__udivmodhi4_loop>
 b5e:	80 95       	com	r24
 b60:	90 95       	com	r25
 b62:	bc 01       	movw	r22, r24
 b64:	cd 01       	movw	r24, r26
 b66:	08 95       	ret

00000b68 <itoa>:
 b68:	45 32       	cpi	r20, 0x25	; 37
 b6a:	51 05       	cpc	r21, r1
 b6c:	20 f4       	brcc	.+8      	; 0xb76 <itoa+0xe>
 b6e:	42 30       	cpi	r20, 0x02	; 2
 b70:	10 f0       	brcs	.+4      	; 0xb76 <itoa+0xe>
 b72:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__itoa_ncheck>
 b76:	fb 01       	movw	r30, r22
 b78:	10 82       	st	Z, r1
 b7a:	cb 01       	movw	r24, r22
 b7c:	08 95       	ret

00000b7e <__itoa_ncheck>:
 b7e:	bb 27       	eor	r27, r27
 b80:	4a 30       	cpi	r20, 0x0A	; 10
 b82:	31 f4       	brne	.+12     	; 0xb90 <__itoa_ncheck+0x12>
 b84:	99 23       	and	r25, r25
 b86:	22 f4       	brpl	.+8      	; 0xb90 <__itoa_ncheck+0x12>
 b88:	bd e2       	ldi	r27, 0x2D	; 45
 b8a:	90 95       	com	r25
 b8c:	81 95       	neg	r24
 b8e:	9f 4f       	sbci	r25, 0xFF	; 255
 b90:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__utoa_common>

00000b94 <__utoa_ncheck>:
 b94:	bb 27       	eor	r27, r27

00000b96 <__utoa_common>:
 b96:	fb 01       	movw	r30, r22
 b98:	55 27       	eor	r21, r21
 b9a:	aa 27       	eor	r26, r26
 b9c:	88 0f       	add	r24, r24
 b9e:	99 1f       	adc	r25, r25
 ba0:	aa 1f       	adc	r26, r26
 ba2:	a4 17       	cp	r26, r20
 ba4:	10 f0       	brcs	.+4      	; 0xbaa <__utoa_common+0x14>
 ba6:	a4 1b       	sub	r26, r20
 ba8:	83 95       	inc	r24
 baa:	50 51       	subi	r21, 0x10	; 16
 bac:	b9 f7       	brne	.-18     	; 0xb9c <__utoa_common+0x6>
 bae:	a0 5d       	subi	r26, 0xD0	; 208
 bb0:	aa 33       	cpi	r26, 0x3A	; 58
 bb2:	08 f0       	brcs	.+2      	; 0xbb6 <__utoa_common+0x20>
 bb4:	a9 5d       	subi	r26, 0xD9	; 217
 bb6:	a1 93       	st	Z+, r26
 bb8:	00 97       	sbiw	r24, 0x00	; 0
 bba:	79 f7       	brne	.-34     	; 0xb9a <__utoa_common+0x4>
 bbc:	b1 11       	cpse	r27, r1
 bbe:	b1 93       	st	Z+, r27
 bc0:	11 92       	st	Z+, r1
 bc2:	cb 01       	movw	r24, r22
 bc4:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <strrev>

00000bc8 <strrev>:
 bc8:	dc 01       	movw	r26, r24
 bca:	fc 01       	movw	r30, r24
 bcc:	67 2f       	mov	r22, r23
 bce:	71 91       	ld	r23, Z+
 bd0:	77 23       	and	r23, r23
 bd2:	e1 f7       	brne	.-8      	; 0xbcc <strrev+0x4>
 bd4:	32 97       	sbiw	r30, 0x02	; 2
 bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <strrev+0x18>
 bd8:	7c 91       	ld	r23, X
 bda:	6d 93       	st	X+, r22
 bdc:	70 83       	st	Z, r23
 bde:	62 91       	ld	r22, -Z
 be0:	ae 17       	cp	r26, r30
 be2:	bf 07       	cpc	r27, r31
 be4:	c8 f3       	brcs	.-14     	; 0xbd8 <strrev+0x10>
 be6:	08 95       	ret

00000be8 <_exit>:
 be8:	f8 94       	cli

00000bea <__stop_program>:
 bea:	ff cf       	rjmp	.-2      	; 0xbea <__stop_program>
